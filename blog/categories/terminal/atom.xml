<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：terminal | 冷雨之家]]></title>
  <link href="http://douxinchun.github.io/blog/categories/terminal/atom.xml" rel="self"/>
  <link href="http://douxinchun.github.io/"/>
  <updated>2021-11-05T19:20:23+08:00</updated>
  <id>http://douxinchun.github.io/</id>
  <author>
    <name><![CDATA[Spring]]></name>
    <email><![CDATA[douxinchunlengyu@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lipo 使用简介]]></title>
    <link href="http://douxinchun.github.io/blog/20180725/introduction-to-lipo.html"/>
    <updated>2018-07-25T17:25:25+08:00</updated>
    <id>http://douxinchun.github.io/blog/20180725/introduction-to-lipo</id>
    <content type="html"><![CDATA[<p>最近在开发iOS SDK, 需要使用到lipo命令, 在此简单做一下记录:</p>

<p>lipo的使用手册</p>

<pre><code class="bash">➜  ~  man lipo

LIPO(1)                                                                     LIPO(1)



NAME
       lipo - create or operate on universal files

SYNOPSIS
       lipo   [-info]   [-detailed_info]   [-arch   arch_type  input_file]  ...   [
       input_file]  ...   [-arch_blank  arch_type]  [-create]   [-thin   arch_type]
       [-replace  arch_type  filename]  ...   [-remove  arch_type]  ...lio   [-extract
       arch_type] ...  [-extract_family  arch_type]  ...   [-verify_arch  arch_type
       ...]  [-output output_file] [-segalign arch_type value] ...

DESCRIPTION
       The  lipo  command creates or operates on ``universal'' (multi-architecture)
       files.  It only ever produces one output file, and never  alters  the  input
       file.  The operations that lipo performs are: listing the architecture types
       in a universal file; creating a single universal file from one or more input
       files;  thinning  out  a single universal file to one specified architecture
       type; and extracting, replacing, and/or removing  architectures  types  from
       the input file to create a single new universal output file.

       Only  one option can be specified, with the exception of -arch, -arch_blank,
       -output, and -segalign, which are used in combination  with  other  options.
       The input_file argument is required, and only the -create option allows more
       than one input_file to be specified.  The -output flag must be used,  except
       with the -info and -detailed_info flags.

       The  arch_type  arguments  may  be  any  of the supported architecture names
       listed in the man page arch(3).
</code></pre>

<p>简单说,lipo就是用来操作universal file的命令,也可以说成是 fat file(因为这种文件确实比较大).在iOS中其实就是用来操作静态链接库(以.a为后缀的文件 )的命令.</p>

<p>fat file一般是指包含两种及以上CPU架构的静态链接库</p>

<p>lipo命令的功能:</p>

<ul>
<li>列举 .a文件 支持的architecture types.(架构类型,eg: armv7, armv7s, i386, x86_64, arm64)</li>
<li>合并多个 .a文件为一个.a文件</li>
<li>给一个 .a文件 瘦身.(剔除某一项CPU的架构类型)</li>
<li>提取, 替换或者移除 .a文件 文件中的某种架构</li>
</ul>


<p>使用lipo命令的注意事项</p>

<ul>
<li>除了 -arch, -arch_black, -output, -segalign选项外,其余的选项只能指定一个. 这几个选选项需要和其它的选项混合使用</li>
<li>除了 -create 选项外, 其余的选项只能指定一个input file作为参数</li>
<li>除了 -info 和 - detailed_info 选项外, 其余的选项必须指定 -output, 可以简写为 -o</li>
</ul>


<h3>lipo命令的使用eg,以WechatSDK 1.8.2作为举例对象</h3>

<h4>1.查看.a文件支持的CPU架构</h4>

<blockquote><p>lipo -info <em>input_file</em></p>

<p>lipo -detailed_info <em>input_file</em></p></blockquote>

<pre><code class="bash">➜  workspace lipo -info libWeChatSDK.a 
Architectures in the .a文件: libWeChatSDK.a are: i386 armv7 armv7s x86_64 arm64 

➜  workspace lipo -detailed_info libWeChatSDK.a
Fat header in: libWeChatSDK.a
fat_magic 0xcafebabe
nfat_arch 5
architecture i386
    cputype CPU_TYPE_I386
    cpusubtype CPU_SUBTYPE_I386_ALL
    offset 108
    size 3247680
    align 2^2 (4)
architecture armv7
    cputype CPU_TYPE_ARM
    cpusubtype CPU_SUBTYPE_ARM_V7
    offset 3247788
    size 3256064
    align 2^2 (4)
architecture armv7s
    cputype CPU_TYPE_ARM
    cpusubtype CPU_SUBTYPE_ARM_V7S
    offset 6503852
    size 3255048
    align 2^2 (4)
architecture x86_64
    cputype CPU_TYPE_X86_64
    cpusubtype CPU_SUBTYPE_X86_64_ALL
    offset 9758904
    size 3363856
    align 2^3 (8)
architecture arm64
    cputype CPU_TYPE_ARM64
    cpusubtype CPU_SUBTYPE_ARM64_ALL
    offset 13122760
    size 3704912
    align 2^3 (8)
➜  workspace 
</code></pre>

<h4>2..a文件 CPU架构拆分</h4>

<blockquote><p>lipo 静态库源文件路径 -thin CPU架构名称 -output 拆分后文件存放路径</p></blockquote>

<pre><code class="bash">➜  workspace lipo -info libWeChatSDK-armv7 
input file libWeChatSDK-armv7 is not a fat file
Non-fat file: libWeChatSDK-armv7 is architecture: armv7
</code></pre>

<h4>3.合并两个 .a文件s</h4>

<blockquote><p>lipo -create 静态库存放路径1  静态库存放路径2 &hellip;  -output 整合后存放的路径</p></blockquote>

<pre><code class="bash">➜  workspace lipo -create libWeChatSDK-armv7 libWeChatSDK-i386 -o libWeChatSDK-i386+armv7
➜  workspace lipo -info libWeChatSDK-i386+armv7 
Architectures in the fat file: libWeChatSDK-i386+armv7 are: armv7 i386 
➜  workspace 

➜  workspace lipo -create libWeChatSDK.a TYRZSD.a -o combine-library.a
fatal error: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/lipo: libWeChatSDK.a and TYRZSD.a have the same architectures (i386) and can't be in the same fat output file
</code></pre>

<p>这里需要注意一下,如果要合并的两个.a 文件含有相同的架构的话,会报如上的错误. 这种情况下怎么合并,可参照下一个章节</p>

<h4>4.用 lipo 删除某些平台</h4>

<blockquote><p>$ lipo input_file -remove i386 -output output_file</p></blockquote>

<pre><code class="bash">➜  workspace lipo libWeChatSDK.a -remove i386 -o libWeChatSDK-noi386
➜  workspace lipo -info libWeChatSDK-noi386 
Architectures in the fat file: libWeChatSDK-noi386 are: armv7 armv7s x86_64 arm64 
</code></pre>

<h3>lipo命令合并.a文件, detail</h3>

<h4>1.分离出上述不同 .a 文件单独支持的架构版本，比如上述 libWeChatSDK.a 和 TYRZSD.a 支持 armv7 armv7s i386 x86_64 arm64，那么就需要分离出单独支持armv7 armv7s i386 x86_64 arm64的 .a 文件</h4>

<pre><code class="bash">➜  workspace lipo libWeChatSDK.a -thin armv7 -o libWeChatSDK-armv7
➜  workspace lipo TYRZSD.a -thin armv7 -o TYRZSD-armv7
</code></pre>

<h4>2.分离出.a库的目标文件（.o)</h4>

<blockquote><p> ar -x 静态链接库</p></blockquote>

<p>因为 .a 库分离出来的目标文件 .o  会很多, 所以, 最好是在工作空间根据不同的CPU建立不同的文件夹</p>

<pre><code class="bash">➜  workspace mkdir armv7
➜  workspace cd armv7 
➜  armv7 
➜  armv7 ar -x ../libWeChatSDK-armv7 
➜  armv7 ls
AppCommunicate.o          MTAPlugin.o               OpenUDID.o
AppCommunicateData.o      MTAPluginIDFA.o           WXApi.o
GCDAsyncSocket.o          MTAPluginInstall.o        WXApiObject.o
MTA.o                     MTAPluginNotify.o         WXLogUtil.o
MTABaseFunction.o         MTAReachability.o         WapAuthHandler.o
MTAConfig.o               MTASendItem.o             WeChatApiUtil.o
MTADataConfigHolder.o     MTASocket.o               WeChatRegister.o
MTAEnv.o                  MTASpeedTestPlugin.o      WechatAuthSDK.o
MTAEvent.o                MTAStore.o                __.SYMDEF
MTAExtStoragePlugin.o     MTATempID.o               base64.o
MTAHelper.o               MTAWX.o
MTAMidPlugin.o            NSMutableArray+MTAQueue.o
➜  armv7 ar -x ../TYRZSD-armv7 
➜  armv7 ls
AppCommunicate.o          MTAReachability.o         UAOpenInfo.o
AppCommunicateData.o      MTASendItem.o             UASession.o
GCDAsyncSocket.o          MTASocket.o               UATimer.o
MTA.o                     MTASpeedTestPlugin.o      UAUtil.o
MTABaseFunction.o         MTAStore.o                WXApi.o
MTAConfig.o               MTATempID.o               WXApiObject.o
MTADataConfigHolder.o     MTAWX.o                   WXLogUtil.o
MTAEnv.o                  NSMutableArray+MTAQueue.o WapAuthHandler.o
MTAEvent.o                OpenUDID.o                WeChatApiUtil.o
MTAExtStoragePlugin.o     TYRZSDK.o                 WeChatRegister.o
MTAHelper.o               TYRZSDK_vers.o            WechatAuthSDK.o
MTAMidPlugin.o            UAAuthViewController.o    __.SYMDEF
MTAPlugin.o               UACrypto.o                __.SYMDEF SORTED
MTAPluginIDFA.o           UAHTTP.o                  base64.o
MTAPluginInstall.o        UALogReport.o
MTAPluginNotify.o         UANetwork.o
</code></pre>

<h4>3.对支持同个架构的.o文件，进行合并成静态库。</h4>

<blockquote><p>libtool -static -o output_file *.o</p></blockquote>

<pre><code class="bash">➜  armv7 libtool -static -o ../combine-library-armv7 *.o
➜  armv7 ls ..
TYRZSD-armv7          armv7                 libWeChatSDK-armv7    libWeChatSDK.a
TYRZSD.a              combine-library-armv7 libWeChatSDK-i386
➜  armv7 
</code></pre>

<h4>4.合成支持全部架构的通用静态库</h4>

<p>如果之前的步骤不出错, 就会得到5个.a文件; combine-library-armv7 combine-library-armv7s combine-library-i386 combine-library-x86_64 combine-library-arm64</p>

<pre><code class="bash">➜  workspace lipo -create combine-library-armv7 combine-library-armv7s combine-library-i386 combine-library-x86_64 combine-library-arm64 -o combine-library
</code></pre>

<p>​    combine-library 就是最终需要的 .a 库</p>

<h3>参考链接</h3>

<p><a href="https://blog.csdn.net/qq_26968709/article/details/51164104">合并多个.a文件</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X 下生成RSA密钥对]]></title>
    <link href="http://douxinchun.github.io/blog/20180718/generate-rsa-key-on-mac-os-x.html"/>
    <updated>2018-07-18T15:15:18+08:00</updated>
    <id>http://douxinchun.github.io/blog/20180718/generate-rsa-key-on-mac-os-x</id>
    <content type="html"><![CDATA[<p>Mac自带OpenSSL,可以利用openssl来生成RSA密钥对</p>

<p>1.生成私钥,1024指密钥的长度</p>

<pre><code class="bash">➜  test openssl genrsa -out private_key.pem 1024
Generating RSA private key, 1024 bit long modulus
.......................................................................++++++
.......................................................................++++++
e is 65537 (0x10001)
➜  test cat private_key.pem 
-----BEGIN RSA PRIVATE KEY-----
MIICXQIBAAKBgQDJrT1W3ZyBAYIMNb0XDBQTIGw4TpbrLelQ/K6Yl6abciAUAZNn
j5EHlFhMvpe3iHU0xPIcTM0IM9ZnMjecikHC4lBJ0JmXEsHf4j6Cf2+KRFHTaxPP
hqf65wiGvduTf70xOCvaPeyYVu4x69jm2rtxOeVvF1PJSrV+ZDCoDmYD3QIDAQAB
AoGAToUwmJ13zZJ0u6RAlrSRLFE3UUTn5XDeojV/FNIWf/cTHjbu2SdAZB8Rse+S
ylZKq9zyFqqgOU1VcKBQnpYFu9XFvpoP/xGC/T99MN3chBaQY4wY80FM8NEjWZbP
ZPTczE/HypE+J14/0i0x6jujhFiAAmcE/1ivRzRGvo6qC9ECQQDmcki4jO4VTju7
+WWINatj36pPn/JVUFH8Tqw98tQLg5VMPFfPNsl9L7CSqACCFvl1wiERuxfunRB0
9dNHb4sHAkEA4ApECRgqo+/7Smd2WTa4hSQ+aYs6J7+9e8zjgfIuYBn5ONOsuIuV
VntHyhSc2Xzbp1wkakCzTy/Tyw02kGCs+wJBAMFLHPpHo7AVRf9+yo48zjzgr99H
/yFWVN54MvtnQjtCLKmcd97kSo+Jv+bTqlFz6dy/b7OKpiFMdzBTvdtOkWMCQQC6
21ULUMCfopQv5kLq/ZzATw5O8PQ8Gstq6eQGiXrsZD1cjA9Oi/yt+HxTqwV2z5BT
8aHdjMEAlp9Kh2au3DLpAkB+koitVpjxmWyzQ/Sl4Xa843oR+qneofZZ3m9johtn
+7NQu3JXI1xBckxmZ4DtODtC7MUIqlOEej5OT9QVwljv
-----END RSA PRIVATE KEY-----
</code></pre>

<p>2.生成公钥</p>

<pre><code class="bash">➜  test openssl rsa -in private_key.pem -pubout -out public_key.pem
writing RSA key
➜  test cat public_key.pem 
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDJrT1W3ZyBAYIMNb0XDBQTIGw4
TpbrLelQ/K6Yl6abciAUAZNnj5EHlFhMvpe3iHU0xPIcTM0IM9ZnMjecikHC4lBJ
0JmXEsHf4j6Cf2+KRFHTaxPPhqf65wiGvduTf70xOCvaPeyYVu4x69jm2rtxOeVv
F1PJSrV+ZDCoDmYD3QIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>3.使用pkcs8命令转换私钥格式 PKCS标准</p>

<pre><code class="bash">➜  test openssl pkcs8 -topk8 -inform PEM -in private_key.pem -outform PEM -nocrypt
-----BEGIN PRIVATE KEY-----
MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAMmtPVbdnIEBggw1
vRcMFBMgbDhOlust6VD8rpiXpptyIBQBk2ePkQeUWEy+l7eIdTTE8hxMzQgz1mcy
N5yKQcLiUEnQmZcSwd/iPoJ/b4pEUdNrE8+Gp/rnCIa925N/vTE4K9o97JhW7jHr
2Obau3E55W8XU8lKtX5kMKgOZgPdAgMBAAECgYBOhTCYnXfNknS7pECWtJEsUTdR
ROflcN6iNX8U0hZ/9xMeNu7ZJ0BkHxGx75LKVkqr3PIWqqA5TVVwoFCelgW71cW+
mg//EYL9P30w3dyEFpBjjBjzQUzw0SNZls9k9NzMT8fKkT4nXj/SLTHqO6OEWIAC
ZwT/WK9HNEa+jqoL0QJBAOZySLiM7hVOO7v5ZYg1q2Pfqk+f8lVQUfxOrD3y1AuD
lUw8V882yX0vsJKoAIIW+XXCIRG7F+6dEHT100dviwcCQQDgCkQJGCqj7/tKZ3ZZ
NriFJD5pizonv717zOOB8i5gGfk406y4i5VWe0fKFJzZfNunXCRqQLNPL9PLDTaQ
YKz7AkEAwUsc+kejsBVF/37KjjzOPOCv30f/IVZU3ngy+2dCO0IsqZx33uRKj4m/
5tOqUXPp3L9vs4qmIUx3MFO9206RYwJBALrbVQtQwJ+ilC/mQur9nMBPDk7w9Dwa
y2rp5AaJeuxkPVyMD06L/K34fFOrBXbPkFPxod2MwQCWn0qHZq7cMukCQH6SiK1W
mPGZbLND9KXhdrzjehH6qd6h9lneb2OiG2f7s1C7clcjXEFyTGZngO04O0LsxQiq
U4R6Pk5P1BXCWO8=
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Terminal 快捷键记录]]></title>
    <link href="http://douxinchun.github.io/blog/20180501/mac-terminal-shortcut-keys.html"/>
    <updated>2018-05-01T18:16:04+08:00</updated>
    <id>http://douxinchun.github.io/blog/20180501/mac-terminal-shortcut-keys</id>
    <content type="html"><![CDATA[<p>Mac 命令行编辑快捷键的方法，对Mac的应用有所帮助。</p>

<h3>Mac 命令行命令</h3>

<table>
<thead>
<tr>
<th>Command      </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>history      </td>
<td> 显示命令历史列表</td>
</tr>
<tr>
<td>↑(Ctrl+p)    </td>
<td> 显示上一条命令</td>
</tr>
<tr>
<td>↓(Ctrl+n)    </td>
<td> 显示下一条命令</td>
</tr>
<tr>
<td>clear        </td>
<td> 清除 shell 提示屏幕</td>
</tr>
<tr>
<td>exit         </td>
<td> 注销</td>
</tr>
<tr>
<td>history      </td>
<td> 显示命令历史</td>
</tr>
<tr>
<td>reset        </td>
<td> 刷新 shell 提示屏幕</td>
</tr>
</tbody>
</table>


<p><br /></p>

<h3>Mac 命令行编辑快捷键</h3>

<table>
<thead>
<tr>
<th>Command      </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>↑(Ctrl+p)    </td>
<td> 显示上一条命令</td>
</tr>
<tr>
<td>↓(Ctrl+n)    </td>
<td> 显示下一条命令</td>
</tr>
<tr>
<td>!num         </td>
<td> 执行命令历史列表的第num条命令</td>
</tr>
<tr>
<td>!!           </td>
<td> 执行上一条命令</td>
</tr>
<tr>
<td>!?string?    </td>
<td> 执行含有string字符串的最新命令</td>
</tr>
<tr>
<td>Ctrl+r       </td>
<td> 然后输入若干字符，开始向上搜索包含该字符的命令，继续按  Ctrl+r，搜索上一条匹配的命令</td>
</tr>
<tr>
<td>Ctrl+s       </td>
<td> 与Ctrl+r类似,只是正向检索</td>
</tr>
<tr>
<td>→(Ctrl+f)    </td>
<td> 光标向前移动一个字符,相当与-></td>
</tr>
<tr>
<td>←(Ctrl+b)    </td>
<td> 光标向后移动一个字符,相当与&lt;-</td>
</tr>
<tr>
<td>opt+←        </td>
<td> 光标向前移动一个单词</td>
</tr>
<tr>
<td>opt+→        </td>
<td> 光标向后移动一个单词</td>
</tr>
<tr>
<td>ls !$        </td>
<td> 执行命令ls，并以上一条命令的参数为其参数</td>
</tr>
<tr>
<td>Ctrl+a       </td>
<td> 移动到当前行的开头</td>
</tr>
<tr>
<td>Ctrl+e       </td>
<td> 移动到当前行的结尾</td>
</tr>
<tr>
<td>Esc+b        </td>
<td> 移动到当前单词的开头</td>
</tr>
<tr>
<td>Esc+f        </td>
<td> 移动到当前单词的结尾</td>
</tr>
<tr>
<td>Ctrl+l       </td>
<td> 清屏</td>
</tr>
<tr>
<td>Ctrl+u       </td>
<td> 剪切命令行中光标所在处之前的所有字符（不包括自身）</td>
</tr>
<tr>
<td>Ctrl+k       </td>
<td> 剪切命令行中光标所在处之后的所有字符（包括自身）</td>
</tr>
<tr>
<td>Ctrl+d       </td>
<td> 删除光标所在处字符</td>
</tr>
<tr>
<td>Ctrl+h       </td>
<td> 删除光标所在处前一个字符</td>
</tr>
<tr>
<td>Ctrl+y       </td>
<td> 粘贴刚才所删除的字符</td>
</tr>
<tr>
<td>Ctrl+w       </td>
<td> 剪切光标所在处之前的一个词（以空格、标点等为分隔符）</td>
</tr>
<tr>
<td>Ctrl+t       </td>
<td> 颠倒光标所在处及其之前的字符位置，并将光标移动到下一个字符</td>
</tr>
<tr>
<td>Ctrl+v       </td>
<td> 插入特殊字符,如Ctrl+v+Tab加入Tab字符键 ,先按下Ctrl+V,抬起后再按下Tab</td>
</tr>
<tr>
<td>Esc+t        </td>
<td> 颠倒光标所在处及其相邻单词的位置</td>
</tr>
<tr>
<td>Ctrl+c       </td>
<td> 删除整行</td>
</tr>
<tr>
<td>Ctrl+(x u)   </td>
<td> 按住Ctrl的同时再先后按x和u，撤销刚才的操作</td>
</tr>
<tr>
<td>Ctrl+s       </td>
<td> 挂起当前shell</td>
</tr>
<tr>
<td>Ctrl+q       </td>
<td> 重新启用挂起的shell</td>
</tr>
</tbody>
</table>


<p><br /></p>

<h3>下面的应用可能稍稍高级一点点</h3>

<table>
<thead>
<tr>
<th>Command                 </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td># !!                   </td>
<td> 上一条命令</td>
</tr>
<tr>
<td># !-n                  </td>
<td> 倒数第N条历史命令</td>
</tr>
<tr>
<td># !-n:p                </td>
<td> 打印上一条命令（不执行）</td>
</tr>
<tr>
<td># !?string?            </td>
<td> 最新一条含有“string”的命令</td>
</tr>
<tr>
<td># !-n:gs/str1/str2/    </td>
<td> 将倒数第N条命令的str1替换为str2，并执行（若不加g,则仅替换第一个)</td>
</tr>
</tbody>
</table>


<h3>参考</h3>

<p><a href="http://notes.11ten.net/mac-command-line-editing-commonly-used-shortcut-keys.html">http://notes.11ten.net/mac-command-line-editing-commonly-used-shortcut-keys.html</a></p>
]]></content>
  </entry>
  
</feed>
