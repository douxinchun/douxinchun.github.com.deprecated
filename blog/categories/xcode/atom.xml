<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：xcode | 冷雨之家]]></title>
  <link href="http://douxinchun.github.io/blog/categories/xcode/atom.xml" rel="self"/>
  <link href="http://douxinchun.github.io/"/>
  <updated>2021-11-05T19:20:23+08:00</updated>
  <id>http://douxinchun.github.io/</id>
  <author>
    <name><![CDATA[Spring]]></name>
    <email><![CDATA[douxinchunlengyu@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xcode 使用技巧]]></title>
    <link href="http://douxinchun.github.io/blog/20180918/tips-of-xcode.html"/>
    <updated>2018-09-18T17:03:09+08:00</updated>
    <id>http://douxinchun.github.io/blog/20180918/tips-of-xcode</id>
    <content type="html"><![CDATA[<h2>Alcatraz</h2>

<p><a href="https://github.com/alcatraz/Alcatraz">Alcatraz</a>是一款开源的用于Xcode7的插件管理工具.Xcode8以及以后版本需要配合下面的工具来使用.</p>

<h2>update_xcode_plugins</h2>

<p><a href="https://github.com/inket/update_xcode_plugins">update_xcode_plugins</a>可以为Xcode中安装的插件添加UUID, 同时还能够 为Xcode8以及以上的版本解除签名,这样就可以随心所欲的使用各种Xcode插件了.</p>

<h2>Reset Xcode’s “Load Bundles” warning</h2>

<pre><code class="bash">defaults delete com.apple.dt.Xcode DVTPlugInManagerNonApplePlugIns-Xcode-10.0
</code></pre>

<p>执行该命令,重启Xcode,可以使Xcode弹出&#8221;Load Bundles&#8221;的提示,可以重新load所有的插件.注意command末尾处的Xcode的版本号.</p>

<h2>添加删除行 快捷键 Opt+D</h2>

<ol>
<li><p>修改配置文件(plist)权限</p>

<pre><code class="ba&#39;sh">sudo chmod 666 /Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Resources/IDETextKeyBindingSet.plist
sudo chmod 777 /Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Resources/
</code></pre></li>
<li><p>打开plist文件进行修改</p>

<pre><code class="bash">open /Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Resources/IDETextKeyBindingSet.plist
</code></pre>

<p>找到<strong>root</strong>下的<strong>Deletions</strong>,在<strong>Deletions</strong>下添加一个Key: <strong>Delete Current Line</strong> 值为<strong>deleteToBeginningOfLine:, moveToEndOfLine:, deleteToBeginningOfLine:, deleteBackward:, moveDown:, moveToBeginningOfLine:</strong></p></li>
<li><p>重启Xcode,设置快捷键</p></li>
</ol>


<p>   <strong>Preference</strong> -> <strong>Key Bindings</strong> ,找到 <strong>Delete Current Line</strong> 选项,设置快捷键为 <strong>Opt+D</strong></p>

<h2>Xcode Release Build 版本号自动增加</h2>

<pre><code class="bash">if [ $CONFIGURATION == Release ]; then
echo "Bumping build number..."
plist=${PROJECT_DIR}/${INFOPLIST_FILE}

buildnum=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "${plist}")
if [[ "${buildnum}" == "" ]]; then
echo "No build number in $plist"
exit 2
fi

buildnum=$(expr $buildnum + 1)
/usr/libexec/Plistbuddy -c "Set CFBundleVersion $buildnum" "${plist}"
echo "Bumped build number to $buildnum"

else
echo $CONFIGURATION " build - Not bumping build number."

fi
</code></pre>

<p>使用方法 Xcode&ndash;>Projet&ndash;>Target&ndash;>Build Phases&ndash;>&ldquo;+&rdquo;&ndash;>New Run Script Phase. 顺序放在Target Dependencies之后即可,尽量靠前.</p>

<p>过程, 查找 Info.plist 文件的位置,使用工具 /usr/libexec/PlistBuddy 读取 CFBundleVersion 的值,+1后再写会 Info.plist 文件.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[低版本Xcode调试高版本的iOS系统]]></title>
    <link href="http://douxinchun.github.io/blog/20180713/debug-application-on-newer-ios-from-an-older-xcode.html"/>
    <updated>2018-07-13T17:10:45+08:00</updated>
    <id>http://douxinchun.github.io/blog/20180713/debug-application-on-newer-ios-from-an-older-xcode</id>
    <content type="html"><![CDATA[<p>在使用Xcode作为iOS开发的主IDE的情况下,遇到这种情况最好是AppStore中安装最新版本的Xcode.</p>

<p>下面的方案只是一个临时debug的方案</p>

<h5>1.找到不支持的iOS版本,Xcode中可以使用快捷键: Cmd+Shift+2 ,下图表示不支持的版本是 iOS 12.0 (16A5318d)</h5>

<p><img src="http://p64xrfkn6.bkt.clouddn.com/blog_reference_image/2018/7/1-1.png" alt="Could not locate device support files" /></p>

<h5>2.Terminal cd 到Xcode DeviceSupport 目录下</h5>

<blockquote><p>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport</p></blockquote>

<pre><code class="bash">➜ cd /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport
➜  DeviceSupport ls
10.0         10.3         11.2         8.0          8.3          9.1         
10.1         11.0         11.3         8.1          8.4          9.2
10.2         11.1         11.4 (15F79) 8.2          9.0          9.3
➜  DeviceSupport 
</code></pre>

<h5>3.Important 去网上搜索真机支持包,可以输出关键字&#8221;xcode 12.0 (16A5318d) 真机支持包&#8221;,一般情况下百度网盘中都会有,下载下来,copy到2的目录下,然后重启Xcode,搞定</h5>

<h5>4.不下载真机支持包的方案</h5>

<p>直接拷贝一个DeviceSupport现有的支持版本,重命名为 12.0 (16A5318d), 重启Xcode后搞定.<br/>
注意这里需要用到root权限,命令前加sudo即可.</p>

<pre><code class="bash  ">➜  DeviceSupport sudo cp -rf 11.4\ \(15F79\) 12.0\ \(16A5318d\) 
Password:
➜  DeviceSupport ls
10.0            11.0            11.4 (15F79)    8.2             9.1
10.1            11.1            12.0 (16A5318d) 8.3             9.2
10.2            11.2            8.0             8.4             9.3
10.3            11.3            8.1             9.0             xinchun
➜  DeviceSupport 
</code></pre>

<p><img src="http://p64xrfkn6.bkt.clouddn.com/blog_reference_image/2018/7/1-2.png" alt="success screenshot" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcodebuild 使用注意事项]]></title>
    <link href="http://douxinchun.github.io/blog/20180516/xcodebuild-shi-yong-zhu-yi-shi-xiang.html"/>
    <updated>2018-05-16T11:17:34+08:00</updated>
    <id>http://douxinchun.github.io/blog/20180516/xcodebuild-shi-yong-zhu-yi-shi-xiang</id>
    <content type="html"><![CDATA[<h2>1.xcodebuild cocoapod CONFIGURATION_BUILD_DIR</h2>

<h3>现象</h3>

<pre><code class="bash xcodebuild命令用法示例">xcodebuild -sdk iphoneos -configuration ${BUILD_CONFIGURATION} -derivedDataPath="../build" -workspace '../SohuInk.xcworkspace' -scheme 'SohuInk_Jenkins' -archivePath "../SohuInk_Jenkins.xcarchive" archive
</code></pre>

<p>如果项目中使用了cocoapod并且xcodebuild 命令参数中指定了CONFIGURATION_BUILD_DIR并且值为相对路径,此时在Xcode Tools Version 5.0下的xcodebuild构建会报如下错误:</p>

<pre><code class="bash error_info">ld: warning: directory not found for option '-L/XXXX/XXXX/pop'
ld: library not found for -lAFNetworking
clang: error: linker command failed with exit code 1 (use -v to see invocation)

** ARCHIVE FAILED **

The following build commands failed:
    Ld /Users/XXXX/XXXX/Objects-normal/arm64/SohuInk normal arm64
    Ld /Users/XXXX/XXXX normal armv7
(2 failures)
</code></pre>

<h3>解决方案</h3>

<h4>方案1,不好用</h4>

<p>Xcode Tools version 5.0 支持参数 derivedDataPath 可以放弃CONFIGURATION_BUILD_DIR配置指定该参数,我实际操作是发现使用相对路径的情况下,虽然可以archive success,但是build的目录没有改变,依然在xcode默认的derivedData目录下.</p>

<h4>方案2,OK</h4>

<p>CONFIGURATION_BUILD_DIR的值指定为绝对路径,一切OK,可成功archive.</p>

<h3>结论</h3>

<blockquote><p>xcodebuild中的CONFIGURATION_BUILD_DIR值需要使用绝对路径</p></blockquote>

<h2>参考链接</h2>

<p><a href="https://stackoverflow.com/questions/11965040/xcodebuilding-a-workspace-and-setting-a-custom-build-path/12259098#12259098">Stackoverflow上关于使用xcodebuild CONFIGURATION_BUILD_DIR最好使用绝对路径的说明 @Chilloutman</a><br/>
<a href="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html">https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[获取mobileprovision文件的UUID]]></title>
    <link href="http://douxinchun.github.io/blog/20171202/get-mobileprovison-uuid.html"/>
    <updated>2017-12-02T13:06:26+08:00</updated>
    <id>http://douxinchun.github.io/blog/20171202/get-mobileprovison-uuid</id>
    <content type="html"><![CDATA[<hr />

<h3>Provision Profile 文件在Mac OS中的默认存放位置:</h3>

<blockquote><p>~/Library/MobileDevice/Provisioning Profiles</p></blockquote>

<h3>1.通过GUI的工具查看:</h3>

<p>iPhone配置实用工具</p>

<h3>2.命令行工具</h3>

<p><a href="https://github.com/0xc010d/mobileprovision-read">0xc010d/mobileprovision-read</a><br/>
安装方法<br/>
在 Terminal中键入下面的命令并回车</p>

<pre><code class="bash Terminal">curl https://raw.githubusercontent.com/0xc010d/mobileprovision-read/master/main.m | clang -framework Foundation -framework Security -o /usr/local/bin/mobileprovision-read -x objective-c -
</code></pre>

<h4>mobileprovision-read 命令介绍</h4>

<pre><code class="bash Terminal  ">➜  ~ mobileprovision-read 
mobileprovision-read -- mobileprovision files querying tool.

USAGE
mobileprovision-read -f fileName [-o option]

OPTIONS
    type – prints mobileprovision profile type (debug, ad-hoc, enterprise, appstore)
    appid – prints application identifier
Will print raw provision's plist if option is not specified.
You can also use key path as an option.

EXAMPLES
mobileprovision-read -f test.mobileprovision -o type
    Prints profile type

mobileprovision-read -f test.mobileprovision -o UUID
    Prints profile UUID

mobileprovision-read -f test.mobileprovision -o ProvisionedDevices
    Prints provisioned devices UDIDs

mobileprovision-read -f test.mobileprovision -o Entitlements.get-task-allow
    Prints 0 if profile doesn't allow debugging 1 otherwise
➜  ~ 
</code></pre>

<p>eg:<br/>
mobileprovision-read -f &ldquo;filepath&rdquo; -o UUID  -> 打印输出mobileprovision的UUID<br/>
mobileprovision-read -f &ldquo;provisoning-profile-file-path&rdquo; -o ProvisionedDevices  -> 列出描述文件所包含的device UUID列表</p>

<h3>3.自定义脚本</h3>

<p>使用了苹果的security和PlistBuddy工具.<br/>
<a href="https://github.com/douxinchun/MyBackupForMacOSX/blob/master/shell/mobilapp.sh">mobileapp.sh</a><br/>
使用方法:<br/>
./mobileapp.sh &ldquo;provisoning-profile-file-path&rdquo;<br/>
注意,如果filepath中含有空格,请将filepath加上双引号.</p>

<p>eg:<br/>
<code>bash Terminal
➜  Desktop ./mobilepp.sh "/Users/newspring/Library/MobileDevice/Provisioning Profiles/1213b96b-4ac1-4365-ae45-350eb6beadf2.mobileprovision"
security: SecPolicySetValue: One or more parameters passed to a function were not valid.
UUID is:
1213b96b-4ac1-4365-ae45-350eb6beadf2
</code></p>

<h3>参考链接</h3>

<p><a href="https://my.oschina.net/ioslighter/blog/494342">https://my.oschina.net/ioslighter/blog/494342</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用CocoaLumberjack和XcodeColors实现分级Log和控制台打印彩色日志]]></title>
    <link href="http://douxinchun.github.io/blog/20160728/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-da-yin-cai-se-ri-zhi.html"/>
    <updated>2016-07-28T14:42:39+08:00</updated>
    <id>http://douxinchun.github.io/blog/20160728/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-da-yin-cai-se-ri-zhi</id>
    <content type="html"><![CDATA[<p>本文是基于:<a href="https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/">https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/</a> 的改动.</p>

<p>Xcode是一款非常优秀的IDE,但是在日志打印上貌似没有那么多高级的特性，比如分级打印，显示颜色。本博客就介绍下两个开源组件结合使用达到如下效果：
<img src="/blog_reference_image/2016/7/xcode_console_colorful_logs.png"></p>

<h2>1.CocoaLumberjack</h2>

<h3>1.1基本介绍</h3>

<p>CocoaLumberjack是一个开源工程，为Xcode提供分级打印的策略，源码地址:<a href="https://github.com/CocoaLumberjack/CocoaLumberjack">CocoaLumberjack</a></p>

<p>CocoaLumberjack包含几个对象分别可以把Log输出到不同的地方:</p>

<ul>
<li>DDASLLogger 输出到Console.app</li>
<li>DDTTYLogger 输出到Xcode控制台</li>
<li>DDLogFileManager 输出到文件</li>
<li>DDAbstractDatabaseLogger 输出到DB</li>
</ul>


<p>通过ddLogLevel的int型变量或常量来定义打印等级</p>

<ul>
<li>LOG_LEVEL_OFF 关闭Log</li>
<li>LOG_LEVEL_ERROR 只打印Error级别的Log</li>
<li>LOG_LEVEL_WARN 打印Error和Warning级别的Log</li>
<li>LOG_LEVEL_INFO 打印Error、Warn、Info级别的Log</li>
<li>LOG_LEVEL_DEBUG 打印Error、Warn、Info、Debug级别的Log</li>
<li>LOG_LEVEL_VERBOSE 打印Error、Warn、Info、Debug、Verbose级别的Log</li>
</ul>


<p>使用不同的宏打印不同级别的Log</p>

<ul>
<li>DDLogError(frmt, …) 打印Error级别的Log</li>
<li>DDLogWarn(frmt, …) 打印Warn级别的Log</li>
<li>DDLogInfo(frmt, …) 打印Info级别的Log</li>
<li>DDLogDebug(frmt, …) 打印Debug级别的Log</li>
<li>DDLogVerbose(frmt, …) 打印Verbose级别的Log</li>
</ul>


<p>如果,现在想往已有的工程中引入CocoaLumberjack,可以使用下面的宏定义,</p>

<pre><code>#define NSLog(...) DDLogInfo(__VA_ARGS__)
</code></pre>

<h3>1.2设置LogFormatter</h3>

<p>我们可以定制自己的Log的方式。通过创建一个类实现DDLogFormatter协议的方法<code>- (NSString *)formatLogMessage:(DDLogMessage *)logMessage;</code>,如下创建一个LogFormatter类，并实现如下方法：</p>

<pre><code>...
NSDateFormatter *threadUnsafeDateFormatter;
threadUnsafeDateFormatter = [[NSDateFormatter alloc] init];
        [threadUnsafeDateFormatter setDateFormat:@"yyyy/MM/dd HH:mm:ss:SSS"];
...  

-(NSString *)formatLogMessage:(DDLogMessage *)logMessage{

    NSString *levelStr = nil;
    NSString *dateAndTime = [threadUnsafeDateFormatter stringFromDate:(logMessage-&gt;_timestamp)];

    switch (logMessage.flag) {
        case DDLogFlagError:
        {
            levelStr=@"[ERROR]";
            break;
        }
        case DDLogFlagWarning:{
            levelStr=@"[WARN ]";
            break;
        }
        case DDLogFlagDebug:{
            levelStr=@"[DEBUG]";
            break;
        }
        case DDLogFlagInfo:
        {
            levelStr=@"[INFO ]";
            break;
        }
        default:
            levelStr=@"[VBOSE]";
            break;
    }

    return [NSString stringWithFormat:@"%@ %@ &gt; %@ [line %d] %@",levelStr,dateAndTime,logMessage.function,logMessage.line,logMessage.message];
}
</code></pre>

<p>上面的例子中我们定制了Log能打印自己的等级、类和方法、代码行数。</p>

<h3>1.3初始化</h3>

<p>CocoaLumberjack的引擎需要我们自己来启动。下面的示例代码</p>

<pre><code> DDFileLogger *filelogger = [[DDFileLogger alloc] init];
    filelogger.rollingFrequency = 60*60*24;//1h滚动一次
    filelogger.logFileManager.maximumNumberOfLogFiles = 24;//最大文件数量24个

    [[DDTTYLogger sharedInstance] setColorsEnabled:YES];
    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor blackColor] backgroundColor:nil forFlag:DDLogFlagVerbose];
    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor blueColor] backgroundColor:nil forFlag:DDLogFlagDebug];
    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor purpleColor] backgroundColor:nil forFlag:DDLogFlagInfo];
    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor orangeColor] backgroundColor:nil forFlag:DDLogFlagWarning];

    [DDLog addLogger:[DDTTYLogger sharedInstance]];//写入xCode控制台
    [DDLog addLogger:[DDASLLogger sharedInstance]];//写入到苹果的日志
    [DDLog addLogger:filelogger];//写入到文件系统 Cache/Library/Log
    filelogger.logFormatter = [[SHDDLogFormatter alloc] init];
    [DDTTYLogger sharedInstance].logFormatter = [[SHDDLogFormatter alloc] init];

    DDLogError(@"DDLogError 中文错误");      // red
    DDLogWarn(@"DDLogWarn 中文警告");        // orange
    DDLogDebug(@"DDLogDebug 中文调试");      // blue
    DDLogInfo(@"DDLogInfo 中文信息");        // purple
    DDLogVerbose(@"DDLogVerbose 中文详细");  // black
</code></pre>

<h2>2.XcodeColors</h2>

<h3>2.1安装</h3>

<p>XcodeColors是一个Xcode插件，源码地址：<a href="https://github.com/robbiehanson/XcodeColors">XcodeColors</a>; 代码下下来后打开工程run一次，插件就自动安装到了~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/XcodeColors.xcplugin路径下.<br/>
安装完成重启Xcode<br/>
也可以通过Alcatraz来安装,具体的参见<a href="/blog/20150401/xcode-plugin-collection.html">Xcode常用插件集合</a></p>

<h3>2.2配置scheme</h3>

<p>在Scheme中配置Environment Variables, 添加参数XcodeColors为YES.如下图
<img src="/blog_reference_image/2016/7/XcodeColors_scheme.png"></p>

<h3>2.3为DDLog打开颜色</h3>

<pre><code>[[DDTTYLogger sharedInstance] setColorsEnabled:YES];
</code></pre>

<h3>2.4为特定的Log级别设定颜色</h3>

<pre><code>    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor orangeColor] backgroundColor:nil forFlag:DDLogFlagWarning];
</code></pre>

<p>完成以上步骤就可以看到控制台的不同颜色的打印了。。</p>

<h2>参考文章</h2>

<p><a href="https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/">https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/</a></p>
]]></content>
  </entry>
  
</feed>
