<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[冷雨之家]]></title>
  <link href="http://douxinchun.github.io/atom.xml" rel="self"/>
  <link href="http://douxinchun.github.io/"/>
  <updated>2021-11-05T19:20:23+08:00</updated>
  <id>http://douxinchun.github.io/</id>
  <author>
    <name><![CDATA[Spring]]></name>
    <email><![CDATA[douxinchunlengyu@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[将 iPhone 备份文件迁移到外置磁盘]]></title>
    <link href="http://douxinchun.github.io/blog/20211105/move-the-iphone-backups-to-a-external-disk.html"/>
    <updated>2021-11-05T17:03:06+08:00</updated>
    <id>http://douxinchun.github.io/blog/20211105/move-the-iphone-backups-to-a-external-disk</id>
    <content type="html"><![CDATA[<p>随着iPhone的不断升级迭代，手机闪存的容量也是越来越大。最新的 iPhone13 的起步闪存更是达到了128GB。这样的话，如果使用电脑的内置硬盘来存储iPhone的备份，那么将会浪费巨大的硬盘空间。比如，我的iPhone 13 pro，备份文件占硬盘70多个G。我平时主要是使用mac电脑，内置硬盘空间不可扩充，内置硬盘空间简直是寸土寸金。</p>

<p>本文主要介绍几种将iPhone的备份文件位置从内置硬盘迁移到外置硬盘（移动硬盘）上的方法。</p>

<h2>方法一： 使用第三方备份软件</h2>

<p>有一些第三方的备份软件，提供了自定义备份文件存放路径的选项， 比如 <a href="https://imazing.com/?gclid=EAIaIQobChMIh_GI6PSA9AIVmzArCh0TyQO3EAAYASAAEgLtFvD_BwE">iMazing</a></p>

<p>可以直接在 [偏好设置] → [备份] 中直接修改默认的备份位置。</p>

<p><strong>优点</strong></p>

<ul>
<li>操作简单，方便</li>
<li>iMazing的备份速度似乎比系统的快</li>
<li>三方软件提供了一些查看备份内容的功能，不过这个基本上用处不大，因为这本来就是备份文件，主要是用来防止原始文件丢失的，不用用来查看，操作文件的。</li>
</ul>


<p><strong>缺点</strong>:</p>

<ul>
<li>iMazing是一款收费软件，好在单机版license 不怎么贵，大概是￥100左右。</li>
</ul>


<h2>方法二：使用软链接将系统默认的备份位置链接到移动硬盘下的备份目录下</h2>

<p>Mac OS存放iPhone备份文件的位置是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~/Library/Application Support/MobileSync/Backup</span></code></pre></td></tr></table></div></figure>


<p>Backup下每个文件夹代表一台设备。文件夹的命名不具有可读性，类似：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>00008020-000D389C366A002E 00008110-001421520A2A801E</span></code></pre></td></tr></table></div></figure>


<p>Setps：</p>

<ol>
<li><p>将 Backup 文件夹下所有的文件移到外置硬盘上，假设外置硬盘的路径为：<code>/Volumes/EcternalDisk/ios_backups</code></p></li>
<li><p>删除<code>~/Library/Application Support/MobileSync/Backup</code> 文件夹</p></li>
<li><p>使用软链接关联 <code>~/Library/Application Support/MobileSync/Backup</code> ，<code>/Volumes/EcternalDisk/ios_backups</code>, 具体的命令为：</p>

<pre><code>ln -s /Volumes/EcternalDisk/ios_backups ~/Library/Application\ Support/MobileSync/Backup
</code></pre></li>
</ol>


<p>这样，以后每次使用 iTunes或者Finder（maxOS Big Sur 11.6 中，iTunes中的备份功能被拆分到了Finder中）备份iPhone的时候，备份文件会自动存储到外置硬盘上。 这种方法的本质就是用软链接欺骗了系统。</p>

<p><strong>优点</strong></p>

<ul>
<li>使用 macOS 原生的备份工具，不需要借助第三方软件。</li>
</ul>


<p><strong>缺点</strong></p>

<ul>
<li>备份速度超级慢，手机闪存容量稍微大一些（>16GB），就慢到无法使用。</li>
</ul>


<p>实际体验这个方法之后，我终于理解了为啥Apple不在 iTunes 中提供一个改变备份文件存储路径的选项了。我实际用128GB和256GB的手机测试了下，跑了一晚上，7-8个小时，结果备份没完成&hellip;, 分析了一个可能有一下原因：</p>

<ul>
<li>内置的硬盘是固态硬盘，外置硬盘一般都是机械硬盘，在数据传输速度上，机械硬盘远远低于固态硬盘</li>
<li>备份文件琐碎，文件体积小，数量多，总体的体积却很大，这更加加重了外置硬盘的传输负担</li>
<li>USB接口速率限制，我有一块老硬盘是USB2.0的接口，简直是雪上加霜。</li>
</ul>


<h2>方法三（推荐）：打成zip文件放在外置硬盘上</h2>

<p>这种方法就比较简单了，既然备份文件就放在这里。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~/Library/Application Support/MobileSync/Backup</span></code></pre></td></tr></table></div></figure>


<p>那么，我只需要在备份完成之后，把每个设备文件夹打个zip包，扔到外置硬盘上就行，等需要用到备份文件的时候，再迁移回来即可。</p>

<p><strong>优点</strong></p>

<ul>
<li>macOS 系统原生备份</li>
</ul>


<p><strong>缺点</strong></p>

<ul>
<li>需要在备份的时候临时占用电脑内置硬盘的一部分空间</li>
</ul>


<h2>Link</h2>

<p><a href="https://sspai.com/post/33524">[将你的 iOS 设备备份到外置磁盘 | 一日一技 · Mac]</a></p>

<p><a href="https://www.imore.com/how-move-your-iphone-or-ipad-backups-external-hard-drive">https://www.imore.com/how-move-your-iphone-or-ipad-backups-external-hard-drive</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenWRT下安装和配置shadowsocks]]></title>
    <link href="http://douxinchun.github.io/blog/20210302/install-shadowsocks-on-openwrt.html"/>
    <updated>2021-03-02T01:21:57+08:00</updated>
    <id>http://douxinchun.github.io/blog/20210302/install-shadowsocks-on-openwrt</id>
    <content type="html"><![CDATA[<p>本文主要记录在openWRT下安装和配置shadowsocks的简要过程，便于日后查找和备忘。成功安装后可以实现透明代理，分流和防DNS污染。</p>

<h2>Environment</h2>

<ul>
<li>路由器型号：YouHua WR1200JS</li>
<li>固件版本：OpenWrt 19.07.4 r11208-ce6496d796 / LuCI openwrt-19.07 branch git-21.054.03371-3b137b5</li>
</ul>


<h2>拓扑图+工作原理</h2>

<p><img src="http://douxinchun.github.io/blog_reference_image/2021/3/openwrt-shadowsocks-arch.png" alt="topology map" /></p>

<ol>
<li><p>dnsmasq是openwrt自带的一个软件，提供dns缓存，dhcp等功能。dnsmasq会将dns查询数据包转发给chinadns。</p></li>
<li><p>chinadns的上游DNS服务器有两个，一个是<code>国内DNS</code>，一个是<code>可信DNS</code>（国外DNS）。</p>

<ul>
<li>chinadns会同时向上游的DNS发送请求</li>
<li>如果<code>可信DNS</code>先返回, 则直接采用<code>可信DNS</code>的结果</li>
<li>如果<code>国内DNS</code>先返回, 分两种情况: 如果返回的结果是国内IP,则采用;否则丢弃并等待采用<code>可信DNS</code>的结果</li>
</ul>
</li>
</ol>


<p>3.dns-forwarder 支持DNS TCP查询, 如果ISP的UDP不稳定, 丢包严重,可以使用dns-forwarder来代替<code>ss-tunnel</code>来进行DNS查询.</p>

<p>4.shadowsocks 用于转发数据包, 科学上网. 关于shadowsocks的科普文章可查看这里: <a href="https://www.css3er.com/p/107.html">https://www.css3er.com/p/107.html</a></p>

<h2>相关的ipk软件包下载地址</h2>

<p>ipk软件包集合, 不同的CPU架构需要使用不同的软件包, CPU架构是<code>mipsel_24kc</code>的话, 可以集中从这里下载.<br/>
链接: <a href="https://pan.baidu.com/s/14QDoTLqw-SEBZvQVQeVgvA">https://pan.baidu.com/s/14QDoTLqw-SEBZvQVQeVgvA</a> 提取码: ugsc<br/>
其它的CPU架构, 可以去GitHub主页 -> Releases下载别人已经编译好的软件包, 如果没有, 只能自己下载openWRT的SDK, 自己进行编译.</p>

<ul>
<li>shadowsocks-libev_3.3.5-1_mipsel_24kc.ipk</li>
<li>shadowsocks-libev-server_3.3.5-1_mipsel_24kc.ipk</li>
<li>ChinaDNS_1.3.3-1_mipsel_24kc.ipk</li>
<li>dns-forwarder_1.2.1-2_mipsel_24kc.ipk</li>
<li>luci-compat</li>
<li>luci-app-shadowsocks-without-ipset_1.9.1-1_all.ipk</li>
<li>luci-app-chinadns_1.6.2-1_all.ipk</li>
<li>luci-app-dns-forwarder_1.6.2-1_all.ipk</li>
</ul>


<p>链接: <a href="https://pan.baidu.com/s/14QDoTLqw-SEBZvQVQeVgvA">https://pan.baidu.com/s/14QDoTLqw-SEBZvQVQeVgvA</a> 提取码: ugsc</p>

<h3>openwrt-shadowsocks</h3>

<p><strong>GitHub</strong>: <a href="https://github.com/shadowsocks/openwrt-shadowsocks">https://github.com/shadowsocks/openwrt-shadowsocks</a>  <br/>
<strong>luci-app-shadowsocks</strong>: <a href="https://github.com/shadowsocks/luci-app-shadowsocks">https://github.com/shadowsocks/luci-app-shadowsocks</a></p>

<ul>
<li><p>shadowsocks-libev</p>

<pre><code class="`"> 客户端/
 └── usr/
     └── bin/
         ├── ss-local       // 提供 SOCKS 正向代理, 在透明代理工作模式下用不到这个.
         ├── ss-redir       // 提供透明代理, 从 v2.2.0 开始支持 UDP
         └── ss-tunnel      // 提供端口转发, 可用于 DNS 查询
</code></pre></li>
<li><p>shadowsocks-libev-server</p>

<pre><code>服务端/
└── usr/
    └── bin/
        └── ss-server      // 服务端可执行文件
</code></pre></li>
</ul>


<h3>ChinaDNS</h3>

<p><strong>GitHub</strong>: <a href="https://github.com/aa65535/openwrt-chinadns">https://github.com/aa65535/openwrt-chinadns</a><br/>
<strong>原版ChinaDNS地址, 被请喝茶后已不再维护</strong>:<a href="https://github.com/shadowsocks/ChinaDNS">https://github.com/shadowsocks/ChinaDNS</a><br/>
<strong>luci-app-chinadns</strong>: <a href="https://github.com/aa65535/openwrt-dist-luci">https://github.com/aa65535/openwrt-dist-luci</a></p>

<p>更新 /etc/chinadns_chnroute.txt</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> wget -O- 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | awk -F\| '/CN\|ipv4/ { printf("%s/%d\n", $4, 32-log($5)/log(2)) }' &gt; /etc/chinadns_chnroute.txt</span></code></pre></td></tr></table></div></figure>


<h3>dns-forwarder</h3>

<p><strong>GitHub</strong>: <a href="https://github.com/aa65535/openwrt-dns-forwarder">https://github.com/aa65535/openwrt-dns-forwarder</a><br/>
<strong>luci-app-dns-forwarder</strong>: <a href="https://github.com/aa65535/openwrt-dist-luci">https://github.com/aa65535/openwrt-dist-luci</a></p>

<h3>dnsmasq</h3>

<p>openWRT自带, 无需自行下载安装.<br/>
<strong>GitHub</strong>: <a href="https://github.com/aa65535/openwrt-dnsmasq">https://github.com/aa65535/openwrt-dnsmasq</a></p>

<h2>Install</h2>

<p>去软件项目的GitHub主页 -> Releases下面下载编译好的ipk, 如果没有符合的自己CPU架构的包, 则需要自己下载openWRT的SDK进行编译, 具体的教程各个主页上有.<br/>
查看CPU架构的命令 <code>opkg print-architecture</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@OpenWrt:~# opkg print-architecture
</span><span class='line'>arch all 1
</span><span class='line'>arch noarch 1
</span><span class='line'>arch mipsel_24kc 10
</span><span class='line'>root@OpenWrt:~#
</span></code></pre></td></tr></table></div></figure>


<p>下载完成有两种方式安装<br/>
方式一(建议): 通过web使用luci安装:
路径: 系统 -> Software -> Upload Package&hellip; -> Install</p>

<p>方式二: 直接在线通过opkg命令来安装(注意使用方式需要提前更新好软件源, <code>opkg update</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>opkg install luci-compat
</span></code></pre></td></tr></table></div></figure>


<h2>Config</h2>

<h3>方式一, 使用luci来配置</h3>

<p>登录luci.</p>

<ol>
<li>配置ss-server <br/>
 <code>服务</code> -> <code>影梭</code> -> <code>服务器管理</code>, 添加自己的shadowsocks server</li>
<li>配置dnsmasq

<ul>
<li><code>网络</code> -> <code>DHCP/DNS</code> -> <code>常规设置</code> -> <code>本地服务器</code>, 设置为 <code>127.0.0.1#5353</code></li>
<li><code>网络</code> -> <code>DHCP/DNS</code> -> <code>HOSTS和解析文件</code>, 勾选: <code>忽略解析文件</code></li>
</ul>
</li>
<li>配置ChinaDNS<br/>
 <code>服务</code> -> <code>ChinaDNS</code><br/>
 监听端口: <code>5353</code><br/>
 上游服务器修改为: <code>114.114.114.114,127.0.0.1#5300</code><br/>
 这样<code>国内DNS</code>: <code>114.114.114.114</code>, <code>可信DNS</code>: <code>127.0.0.1#5353</code>, 勾选 <code>启用</code>, 保存设置</li>
<li>配置dns-forwarder<br/>
 <code>服务</code> -> <code>DNS转发</code><br/>
 监听端口: <code>5300</code>
 监听地址: <code>0.0.0.0</code><br/>
 上游 DNS: <code>8.8.8.8</code>
 勾选, <code>启用</code> 保存</li>
<li><p>配置shadowsocks 透明代理 + 访问控制<br/>
 <code>服务</code> -> <code>影梭</code> -> <code>常规设置</code> -> <code>透明代理</code><br/>
 <code>主服务器</code>, 选择setp1中配置的ss-server, 保存.<br/>
 <code>服务</code>-> <code>影梭</code> -> <code>常规设置</code> -> <code>访问控制</code>-> <code>外网区域</code> <br/>
 <code>被忽略IP列表</code>, 选择 <code>ChinaDNS路由表</code>, 保存设置.  注意这里的优先级: (走代理IP列表 = 强制走代理IP) > (额外被忽略IP = 被忽略IP列表)</p></li>
<li><p><code>保存并应用</code> 所有配置, reboot openWRT</p></li>
</ol>


<h3>方式二, 直接编辑/etc/config目录下的文件</h3>

<p>课外阅读: UCI System
<a href="https://oldwiki.archive.openwrt.org/doc/uci">UCI system</a></p>

<blockquote><p>The abbreviation UCI stands for Unified Configuration Interface and is intended to centralize the configuration of OpenWrt.</p></blockquote>

<h4>/etc/config/shadowsocks</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@OpenWrt:~# cat /etc/config/shadowsocks
</span><span class='line'>
</span><span class='line'>config general
</span><span class='line'>  option startup_delay <span class="s1">&#39;0&#39;</span>
</span><span class='line'>
</span><span class='line'>config transparent_proxy
</span><span class='line'>  option udp_relay_server <span class="s1">&#39;nil&#39;</span>
</span><span class='line'>  option local_port <span class="s1">&#39;1234&#39;</span>
</span><span class='line'>  option mtu <span class="s1">&#39;1492&#39;</span>
</span><span class='line'>  list main_server <span class="s1">&#39;cfg054a8f&#39;</span>
</span><span class='line'>
</span><span class='line'>config socks5_proxy
</span><span class='line'>  option local_port <span class="s1">&#39;1080&#39;</span>
</span><span class='line'>  option mtu <span class="s1">&#39;1492&#39;</span>
</span><span class='line'>  list server <span class="s1">&#39;nil&#39;</span>
</span><span class='line'>
</span><span class='line'>config port_forward
</span><span class='line'>  option local_port <span class="s1">&#39;5300&#39;</span>
</span><span class='line'>  option mtu <span class="s1">&#39;1492&#39;</span>
</span><span class='line'>  option destination <span class="s1">&#39;8.8.8.8:53&#39;</span>
</span><span class='line'>  list server <span class="s1">&#39;nil&#39;</span>
</span><span class='line'>
</span><span class='line'>config servers
</span><span class='line'>  option fast_open <span class="s1">&#39;0&#39;</span>
</span><span class='line'>  option no_delay <span class="s1">&#39;0&#39;</span>
</span><span class='line'>  option timeout <span class="s1">&#39;60&#39;</span>
</span><span class='line'>  option server <span class="s1">&#39;服务器地址,注意luci下这里只能是ip&#39;</span>
</span><span class='line'>  option server_port <span class="s1">&#39;端口&#39;</span>
</span><span class='line'>  option password <span class="s1">&#39;密码&#39;</span>
</span><span class='line'>  option encrypt_method <span class="s1">&#39;加密方式&#39;</span>
</span><span class='line'>  option <span class="nb">alias</span> <span class="s1">&#39;ss服务别名&#39;</span>
</span><span class='line'>
</span><span class='line'>config access_control
</span><span class='line'>  option self_proxy <span class="s1">&#39;1&#39;</span>
</span><span class='line'>  option lan_target <span class="s1">&#39;SS_SPEC_WAN_AC&#39;</span>
</span><span class='line'>  option wan_bp_list <span class="s1">&#39;/etc/chinadns_chnroute.txt&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>/etc/config/dhcp</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@OpenWrt:~# cat /etc/config/dhcp
</span><span class='line'>
</span><span class='line'>config dnsmasq
</span><span class='line'>  option domainneeded <span class="s1">&#39;1&#39;</span>
</span><span class='line'>  option localise_queries <span class="s1">&#39;1&#39;</span>
</span><span class='line'>  option rebind_protection <span class="s1">&#39;1&#39;</span>
</span><span class='line'>  option rebind_localhost <span class="s1">&#39;1&#39;</span>
</span><span class='line'>  option domain <span class="s1">&#39;lan&#39;</span>
</span><span class='line'>  option expandhosts <span class="s1">&#39;1&#39;</span>
</span><span class='line'>  option authoritative <span class="s1">&#39;1&#39;</span>
</span><span class='line'>  option readethers <span class="s1">&#39;1&#39;</span>
</span><span class='line'>  option leasefile <span class="s1">&#39;/tmp/dhcp.leases&#39;</span>
</span><span class='line'>  option localservice <span class="s1">&#39;1&#39;</span>
</span><span class='line'>  option <span class="nb">local</span> <span class="s1">&#39;127.0.0.1#5353&#39;</span>
</span><span class='line'>  option noresolv <span class="s1">&#39;1&#39;</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h4>/etc/config/chinadns</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@OpenWrt:~# cat /etc/config/chinadns
</span><span class='line'>
</span><span class='line'>config chinadns
</span><span class='line'>  option chnroute <span class="s1">&#39;/etc/chinadns_chnroute.txt&#39;</span>
</span><span class='line'>  option addr <span class="s1">&#39;0.0.0.0&#39;</span>
</span><span class='line'>  option port <span class="s1">&#39;5353&#39;</span>
</span><span class='line'>  option bidirectional <span class="s1">&#39;1&#39;</span>
</span><span class='line'>  option server <span class="s1">&#39;114.114.114.114,127.0.0.1#5300&#39;</span>
</span><span class='line'>  option <span class="nb">enable</span> <span class="s1">&#39;1&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>/etc/config/dns-forwarder</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@OpenWrt:~# cat /etc/config/dns-forwarder
</span><span class='line'>
</span><span class='line'>config dns-forwarder
</span><span class='line'>  option listen_addr <span class="s1">&#39;0.0.0.0&#39;</span>
</span><span class='line'>  option listen_port <span class="s1">&#39;5300&#39;</span>
</span><span class='line'>  option <span class="nb">enable</span> <span class="s1">&#39;1&#39;</span>
</span><span class='line'>  option dns_servers <span class="s1">&#39;8.8.8.8&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>验证配置是否生效</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@OpenWrt:~# netstat -lpn <span class="p">|</span> grep ss
</span><span class='line'>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:1234            0.0.0.0:*               LISTEN      13469/ss-redir
</span><span class='line'>root@OpenWrt:~# netstat -lpn <span class="p">|</span> grep 5353
</span><span class='line'>udp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:5353            0.0.0.0:*                           1438/chinadns
</span><span class='line'>root@OpenWrt:~# netstat -lpn <span class="p">|</span> grep 5300
</span><span class='line'>udp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:5300            0.0.0.0:*                           12993/dns-forwarder
</span><span class='line'>root@OpenWrt:~# netstat -lpn <span class="p">|</span> grep 53
</span><span class='line'>tcp        <span class="m">0</span>      <span class="m">0</span> 127.0.0.1:53            0.0.0.0:*               LISTEN      2254/dnsmasq
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>root@OpenWrt:~# nslookup google.com 127.0.0.1#5353
</span><span class='line'>Server:       127.0.0.1
</span><span class='line'>Address:  127.0.0.1#5353
</span><span class='line'>
</span><span class='line'>Name:      google.com
</span><span class='line'>Address 1: 142.250.72.238
</span><span class='line'>Address 2: 2607:f8b0:4007:80d::200e
</span><span class='line'>root@OpenWrt:~#
</span></code></pre></td></tr></table></div></figure>


<h2>Issues</h2>

<ul>
<li>luci-app-shadowsocks 不支持domain的方式配置ss-server, 需要使用IP地址</li>
</ul>


<h2>Link</h2>

<p><a href="https://www.youtube.com/watch?v=2SPQYsMmltE&amp;t=317s">https://www.youtube.com/watch?v=2SPQYsMmltE&amp;t=317s</a> - 十年老程 openwrt shadowsocks安装配置对应的视频教程
<a href="http://snlcw.com/305.html">http://snlcw.com/305.html</a> - 上述教程对应的blog地址.
<a href="https://www.youtube.com/channel/UCgo7XWK6MQBgKt0gBI6x3CA/videos">https://www.youtube.com/channel/UCgo7XWK6MQBgKt0gBI6x3CA/videos</a> - 十年老程的Youtube专栏，里面有各种科学上网的视频教程.
<a href="https://openwrt.org/docs/guide-user/base-system/dhcp_configuration">https://openwrt.org/docs/guide-user/base-system/dhcp_configuration</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitignore 文件屏蔽规则]]></title>
    <link href="http://douxinchun.github.io/blog/20190131/rule-of-gitignore-file.html"/>
    <updated>2019-01-31T18:10:28+08:00</updated>
    <id>http://douxinchun.github.io/blog/20190131/rule-of-gitignore-file</id>
    <content type="html"><![CDATA[<p>文件名： <strong>.gitignore</strong></p>

<p>位置：</p>

<p>global 当前用户的主目录下 ~  一般是自己使用不和别人share 该设置对所有的本地仓库都起作用</p>

<p>local 当前仓库的主目录下 一般需要加入到git库的版本控制中，需要和别人share</p>

<p><strong>git config</strong> 中的 <strong>core.excludesfile</strong> 可以指定 .gitignore 文件</p>

<p>格式规范如下：</p>

<ul>
<li>所有空行和#开头的行都会被忽略</li>
<li>文件或者目录前加 / 表示仓库根目录下的对应文件，子目录下的同名文件不忽略</li>
<li>文件或者目录后加 / 表示要忽略的是目录，不加 / 表示文件和目录都忽略</li>
<li>所有模式取反可以在最前面加 ！</li>
<li>可以使用标准的 <strong>glob</strong> 模式匹配</li>
</ul>


<p>glob 模式是一种简化了的正则表达式，使用于shell
- * 匹配零个或者多个任意字符
- ？匹配任意一个字符
- [abc] 匹配任意一个方括号中的字符
- [0-9] 短线表示范围，表示匹配任意一个0到9的数字
- {string1,string2} 大括号代表可选的字符串</p>

<p>匹配时，下面的条目可以覆盖上</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>readme.md       <span class="c"># 屏蔽仓库中所有名为 readme.md 的文件</span>
</span><span class='line'>!/readme.md     <span class="c"># 在上一条屏蔽规则的条件下，不屏蔽仓库根目录下的 readme.md 文件</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Link</h2>

<p><a href="https://www.jianshu.com/p/13612fb4b224">https://www.jianshu.com/p/13612fb4b224</a>
<a href="https://www.cnblogs.com/qwertWZ/archive/2013/03/26/2982231.html">https://www.cnblogs.com/qwertWZ/archive/2013/03/26/2982231.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C 语言函数指针小测试]]></title>
    <link href="http://douxinchun.github.io/blog/20180928/function-pointer-test.html"/>
    <updated>2018-09-28T15:10:54+08:00</updated>
    <id>http://douxinchun.github.io/blog/20180928/function-pointer-test</id>
    <content type="html"><![CDATA[<p>首先看一道趣味题,来源:<a href="https://www.v2ex.com/t/492705">https://www.v2ex.com/t/492705</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">[]</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">**********************</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 [] 标记内加入一条语句，使得：</p>

<ol>
<li>程序编译通过，无错误（警告随意）；链接通过，无错误（警告随意）</li>
<li>程序能够运行，无崩溃和运行时错误</li>
<li>源代码为.c 文件</li>
<li>如果用 vs，则使用 Release 配置；用 gcc 也行</li>
<li>加入的语句不能忽略分号</li>
<li>printf 一句必须能够正常输出内容</li>
</ol>


<p>答案如下表</p>

<table>
<thead>
<tr>
<th> int(*p)(); </th>
<th> 10个字符 </th>
<th> 兼容 gcc、g++、vs        </th>
</tr>
</thead>
<tbody>
<tr>
<td> int p(){}  </td>
<td> 9个字符  </td>
<td> 兼容 gcc，不兼容 g++、vs </td>
</tr>
<tr>
<td> p();}p(){  </td>
<td> 9个字符  </td>
<td> 兼容 gcc、g++、vs        </td>
</tr>
</tbody>
</table>


<p>本文主要针对第一种答案来说明一下为什么函数指针可以被无线次解引用.</p>

<h2>&amp; *</h2>

<p>说到指针,首先就一定要介绍两个操作符.</p>

<blockquote><p>&amp; 地址操作符(address operators) 单目前缀操作符,操作数为跟在后面的表达式. eg:&amp;a,表示取操作数a的地址,也可以理解为取对象a的地址,或者取变量a的地址等等.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="c1">// 在64处理器的系统模式下,地址的长度为8个字节</span>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;sizeof(&amp;a)=%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="o">**********</span><span class="n">result</span><span class="o">**********</span>
</span><span class='line'><span class="k">sizeof</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">)</span><span class="o">=</span><span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>* 间接操作符 (indirection operators) 单目前缀操作数,同样也是跟在后面的表达式为操作数,可以使用间接操作符通过指针对象间接地访问它所指向对象的值. eg: *a,表示取<strong>指针对象</strong>a中存的地址所指向的值. (这里的表达非常绕,下面举个例子,请自行脑补)</p></blockquote>

<p><em>a的举例: 超市的储物柜,每个格子都有一个唯一对应的条形码,我们认为这就是每个格子的地址,格子本身就是实实在在的三维空间,是可以放物品的.现在有两个格子a格和b格,我们把背包放进了b格,然后把印有b格条码的纸条放进了a格, 那么,a格就相当于一个指针变量, b格就相当于一个普通的变量. </em>a的意思就是 分两步,第一步找到a格,取出a格中存放的条码,第二步,按照条码找到b格,取出b格中的背包.  最终简化一下, *a就是背包.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">666</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;*a=%d sizeof(*a)=%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="o">*</span><span class="n">a</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="o">**********</span><span class="n">result</span><span class="o">**********</span>
</span><span class='line'><span class="o">*</span><span class="n">a</span><span class="o">=</span><span class="mi">666</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">)</span><span class="o">=</span><span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>对于间接操作符,需要特别注意的有两点:</p>

<p>第一,间接操作符(*)与用来声明之神类别对象的&#8221;*&ldquo;不属于同种功能,虽然它们两者确实是同一个字符,unicode码点都是 \u002a</p>

<p>第二,间接操作符只作用于指针类型的对象,也就是说简介操作符的的操作数必须是一个指针类型的对象.</p></blockquote>

<h2>&ldquo;取地址&#8221;与&#8221;解引用&rdquo;</h2>

<p>通俗的讲,对一个变量的 &amp; 操作称为&#8221;取地址&#8221;</p>

<p>对一个指针变量的 * 操作称作&#8221;解引用&#8221;.</p>

<p>换一种角度去理解解引用，&#8221;*&ldquo;的作用是引用指针指向的变量值，引用其实就是引用该变量的地址，“解”就是把该地址对应的东西解开，解出来，就像打开一个包裹一样，那就是该变量的值了，所以称为“解引用”。也就是说，解引用是返回内存地址中保存的值。这个值可以是另一个地址。</p>

<h2>多级指针.</h2>

<p>如果一个指针变量存的是一个普通变量的地址,比如 int <em>a,只能存放一个整型变量的地址,那么这个指针叫做一级指针;如果一个指针变量存放的是另一个指针变量的地址,比如 int **, 里面存放的是一个(int </em>a)类型的指针变量的地址,那么这个指针变量叫二级指针,依次往下推,可以有三级指针,四级指针&hellip;.直到多级指针.</p>

<h2>函数指针</h2>

<p>简单理解就是指向函数地址的指针。比如我们声明的一个C函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="c1">//函数调用</span>
</span><span class='line'><span class="n">func</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么对于函数调用表达式 func() 而言， func后缀表达式就已经表示了一个指向返回类型为void，且参数列表为空的函数的指针：</p>

<blockquote><p>void (*) (void)</p></blockquote>

<p>函数指针的通用表达形式为：</p>

<blockquote><p>返回类型 （* cv限定符 ）（形参列表）</p></blockquote>

<p>其中，cv限定符为可选项。</p>

<p>直接上code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="p">)();</span>
</span><span class='line'><span class="n">p</span><span class="o">=&amp;</span><span class="n">func</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;sizeof(func)= %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">func</span><span class="p">));</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;sizeof(p)= %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;func</span><span class="se">\t</span><span class="s"> %p = %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">func</span><span class="p">,</span><span class="n">func</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;p *p</span><span class="se">\t</span><span class="s"> %p = %p = %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">p</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;p多次解引用 %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">**********************</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">pNull</span><span class="p">)();</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;pNull *p</span><span class="se">\t</span><span class="s"> %p = %p = %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">pNull</span><span class="p">,</span><span class="n">pNull</span><span class="p">,</span><span class="o">*</span><span class="n">pNull</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;pNull多次解引用 %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">**********************</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">**********</span><span class="n">result</span><span class="o">**********</span>
</span><span class='line'><span class="k">sizeof</span><span class="p">(</span><span class="n">func</span><span class="p">)</span><span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">sizeof</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">=</span> <span class="mi">8</span>
</span><span class='line'><span class="n">func</span>    <span class="mh">0x100000df0</span> <span class="o">=</span> <span class="mh">0x100000df0</span>
</span><span class='line'><span class="n">p</span> <span class="o">*</span><span class="n">p</span>  <span class="mh">0x7ffeefbff568</span> <span class="o">=</span> <span class="mh">0x100000df0</span> <span class="o">=</span> <span class="mh">0x100000df0</span>
</span><span class='line'><span class="n">p</span><span class="err">多次解引用</span> <span class="mh">0x100000df0</span>
</span><span class='line'><span class="n">pNull</span> <span class="o">*</span><span class="n">p</span>  <span class="mh">0x7ffeefbff560</span> <span class="o">=</span> <span class="mh">0x0</span> <span class="o">=</span> <span class="mh">0x0</span>
</span><span class='line'><span class="n">pNull</span><span class="err">多次解引用</span> <span class="mh">0x0</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出：</p>

<ol>
<li><p>函数指针变量在64位系统下的大小是8，函数指针常量的大小是1。</p></li>
<li><p>函数指针常量中存储的内容是自身的地址（这是为什么函数指针可以被无限次解引用的关键，因为解到最后一层以后，继续解就陷入了”自己找自己“的循环）。</p></li>
<li><p>未赋值的函数指针变量默认指向的是地址是0x0，对存储在该地址的指针对象解引用的结果依旧是0x0，所以可以认为0x0地址的内存单元中存的是地址0x0（此处上可能有误，尚需以后讨论）。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrome中使用英文关键词搜索中文结果]]></title>
    <link href="http://douxinchun.github.io/blog/20180920/tips-of-google-search.html"/>
    <updated>2018-09-20T17:28:46+08:00</updated>
    <id>http://douxinchun.github.io/blog/20180920/tips-of-google-search</id>
    <content type="html"><![CDATA[<p>在国内,访问Google需要用一点小技巧.有时候,我们使用英文的关键词,但是搜索结果想要查看中文的.由于的这点小技巧的原因,导致Google不能够正确的识别国家和地区的设置.</p>

<p>知乎中有一篇帖子介绍了几个修改的方法: <a href="https://www.zhihu.com/question/37498305">如何修改Chrome里Google搜索的国家和地区设置？</a> 这里我采取另外的一种方法来实现.</p>

<ol>
<li><p>chrome地址栏中输入 chrome://settings/searchEngines 打开chrome中的管理搜索引擎</p></li>
<li><p>复制默认搜索引擎的查询网址:   {google:baseURL}search?q=%s&amp;{google:RLZ}{google:originalQueryForSuggestion}{google:assistedQueryStats}{google:searchFieldtrialParameter}{google:iOSSearchLanguage}{google:searchClient}{google:sourceId}{google:contextualSearchVersion}ie={inputEncoding}</p></li>
<li><p>在上面的String后面追加 &amp;lr=lang_zh-CN, 然后添加一个搜索引擎,
名字:  Google 中文
关键词: cn
查询网址:  {google:baseURL}search?q=%s&amp;{google:RLZ}{google:originalQueryForSuggestion}{google:assistedQueryStats}{google:searchFieldtrialParameter}{google:iOSSearchLanguage}{google:searchClient}{google:sourceId}{google:contextualSearchVersion}ie={inputEncoding}&amp;lr=lang_zh-CN</p></li>
</ol>


<p><img src="http://p64xrfkn6.bkt.clouddn.com/blog_reference_image/2018/9/1-1.png" alt="增加搜索引擎" /></p>

<p>4.保存后,在地址栏中输入 cn+空格 ,然后再输入搜索关键字,OK,展示的搜索结果已经变成中文结果了.</p>

<p><img src="http://p64xrfkn6.bkt.clouddn.com/blog_reference_image/2018/9/1-2.png" alt="使用介绍" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 使用技巧]]></title>
    <link href="http://douxinchun.github.io/blog/20180918/tips-of-xcode.html"/>
    <updated>2018-09-18T17:03:09+08:00</updated>
    <id>http://douxinchun.github.io/blog/20180918/tips-of-xcode</id>
    <content type="html"><![CDATA[<h2>Alcatraz</h2>

<p><a href="https://github.com/alcatraz/Alcatraz">Alcatraz</a>是一款开源的用于Xcode7的插件管理工具.Xcode8以及以后版本需要配合下面的工具来使用.</p>

<h2>update_xcode_plugins</h2>

<p><a href="https://github.com/inket/update_xcode_plugins">update_xcode_plugins</a>可以为Xcode中安装的插件添加UUID, 同时还能够 为Xcode8以及以上的版本解除签名,这样就可以随心所欲的使用各种Xcode插件了.</p>

<h2>Reset Xcode’s “Load Bundles” warning</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults delete com.apple.dt.Xcode DVTPlugInManagerNonApplePlugIns-Xcode-10.0
</span></code></pre></td></tr></table></div></figure>


<p>执行该命令,重启Xcode,可以使Xcode弹出&#8221;Load Bundles&#8221;的提示,可以重新load所有的插件.注意command末尾处的Xcode的版本号.</p>

<h2>添加删除行 快捷键 Opt+D</h2>

<ol>
<li><p>修改配置文件(plist)权限</p>

<pre><code class="ba&#39;sh">sudo chmod 666 /Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Resources/IDETextKeyBindingSet.plist
sudo chmod 777 /Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Resources/
</code></pre></li>
<li><p>打开plist文件进行修改</p>

<pre><code class="bash">open /Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Resources/IDETextKeyBindingSet.plist
</code></pre>

<p>找到<strong>root</strong>下的<strong>Deletions</strong>,在<strong>Deletions</strong>下添加一个Key: <strong>Delete Current Line</strong> 值为<strong>deleteToBeginningOfLine:, moveToEndOfLine:, deleteToBeginningOfLine:, deleteBackward:, moveDown:, moveToBeginningOfLine:</strong></p></li>
<li><p>重启Xcode,设置快捷键</p></li>
</ol>


<p>   <strong>Preference</strong> -> <strong>Key Bindings</strong> ,找到 <strong>Delete Current Line</strong> 选项,设置快捷键为 <strong>Opt+D</strong></p>

<h2>Xcode Release Build 版本号自动增加</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$CONFIGURATION</span> <span class="o">==</span> Release <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Bumping build number...&quot;</span>
</span><span class='line'><span class="nv">plist</span><span class="o">=</span><span class="k">${</span><span class="nv">PROJECT_DIR</span><span class="k">}</span>/<span class="k">${</span><span class="nv">INFOPLIST_FILE</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">buildnum</span><span class="o">=</span><span class="k">$(</span>/usr/libexec/PlistBuddy -c <span class="s2">&quot;Print CFBundleVersion&quot;</span> <span class="s2">&quot;${plist}&quot;</span><span class="k">)</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;${buildnum}&quot;</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;No build number in $plist&quot;</span>
</span><span class='line'><span class="nb">exit </span>2
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nv">buildnum</span><span class="o">=</span><span class="k">$(</span>expr <span class="nv">$buildnum</span> + 1<span class="k">)</span>
</span><span class='line'>/usr/libexec/Plistbuddy -c <span class="s2">&quot;Set CFBundleVersion $buildnum&quot;</span> <span class="s2">&quot;${plist}&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Bumped build number to $buildnum&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$CONFIGURATION</span> <span class="s2">&quot; build - Not bumping build number.&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方法 Xcode&ndash;>Projet&ndash;>Target&ndash;>Build Phases&ndash;>&ldquo;+&rdquo;&ndash;>New Run Script Phase. 顺序放在Target Dependencies之后即可,尽量靠前.</p>

<p>过程, 查找 Info.plist 文件的位置,使用工具 /usr/libexec/PlistBuddy 读取 CFBundleVersion 的值,+1后再写会 Info.plist 文件.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lipo 使用简介]]></title>
    <link href="http://douxinchun.github.io/blog/20180725/introduction-to-lipo.html"/>
    <updated>2018-07-25T17:25:25+08:00</updated>
    <id>http://douxinchun.github.io/blog/20180725/introduction-to-lipo</id>
    <content type="html"><![CDATA[<p>最近在开发iOS SDK, 需要使用到lipo命令, 在此简单做一下记录:</p>

<p>lipo的使用手册</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  ~  man lipo
</span><span class='line'>
</span><span class='line'>LIPO<span class="o">(</span>1<span class="o">)</span>                                                                     LIPO<span class="o">(</span>1<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>NAME
</span><span class='line'>       lipo - create or operate on universal files
</span><span class='line'>
</span><span class='line'>SYNOPSIS
</span><span class='line'>       lipo   <span class="o">[</span>-info<span class="o">]</span>   <span class="o">[</span>-detailed_info<span class="o">]</span>   <span class="o">[</span>-arch   arch_type  input_file<span class="o">]</span>  ...   <span class="o">[</span>
</span><span class='line'>       input_file<span class="o">]</span>  ...   <span class="o">[</span>-arch_blank  arch_type<span class="o">]</span>  <span class="o">[</span>-create<span class="o">]</span>   <span class="o">[</span>-thin   arch_type<span class="o">]</span>
</span><span class='line'>       <span class="o">[</span>-replace  arch_type  filename<span class="o">]</span>  ...   <span class="o">[</span>-remove  arch_type<span class="o">]</span>  ...lio   <span class="o">[</span>-extract
</span><span class='line'>       arch_type<span class="o">]</span> ...  <span class="o">[</span>-extract_family  arch_type<span class="o">]</span>  ...   <span class="o">[</span>-verify_arch  arch_type
</span><span class='line'>       ...<span class="o">]</span>  <span class="o">[</span>-output output_file<span class="o">]</span> <span class="o">[</span>-segalign arch_type value<span class="o">]</span> ...
</span><span class='line'>
</span><span class='line'>DESCRIPTION
</span><span class='line'>       The  lipo  <span class="nb">command </span>creates or operates on <span class="sb">``</span>universal<span class="s1">&#39;&#39;</span> <span class="o">(</span>multi-architecture<span class="o">)</span>
</span><span class='line'>       files.  It only ever produces one output file, and never  alters  the  input
</span><span class='line'>       file.  The operations that lipo performs are: listing the architecture types
</span><span class='line'>       in a universal file<span class="p">;</span> creating a single universal file from one or more input
</span><span class='line'>       files<span class="p">;</span>  thinning  out  a single universal file to one specified architecture
</span><span class='line'>       <span class="nb">type</span><span class="p">;</span> and extracting, replacing, and/or removing  architectures  types  from
</span><span class='line'>       the input file to create a single new universal output file.
</span><span class='line'>
</span><span class='line'>       Only  one option can be specified, with the exception of -arch, -arch_blank,
</span><span class='line'>       -output, and -segalign, which are used in combination  with  other  options.
</span><span class='line'>       The input_file argument is required, and only the -create option allows more
</span><span class='line'>       than one input_file to be specified.  The -output flag must be used,  except
</span><span class='line'>       with the -info and -detailed_info flags.
</span><span class='line'>
</span><span class='line'>       The  arch_type  arguments  may  be  any  of the supported architecture names
</span><span class='line'>       listed in the man page arch<span class="o">(</span>3<span class="o">)</span>.
</span></code></pre></td></tr></table></div></figure>


<p>简单说,lipo就是用来操作universal file的命令,也可以说成是 fat file(因为这种文件确实比较大).在iOS中其实就是用来操作静态链接库(以.a为后缀的文件 )的命令.</p>

<p>fat file一般是指包含两种及以上CPU架构的静态链接库</p>

<p>lipo命令的功能:</p>

<ul>
<li>列举 .a文件 支持的architecture types.(架构类型,eg: armv7, armv7s, i386, x86_64, arm64)</li>
<li>合并多个 .a文件为一个.a文件</li>
<li>给一个 .a文件 瘦身.(剔除某一项CPU的架构类型)</li>
<li>提取, 替换或者移除 .a文件 文件中的某种架构</li>
</ul>


<p>使用lipo命令的注意事项</p>

<ul>
<li>除了 -arch, -arch_black, -output, -segalign选项外,其余的选项只能指定一个. 这几个选选项需要和其它的选项混合使用</li>
<li>除了 -create 选项外, 其余的选项只能指定一个input file作为参数</li>
<li>除了 -info 和 - detailed_info 选项外, 其余的选项必须指定 -output, 可以简写为 -o</li>
</ul>


<h3>lipo命令的使用eg,以WechatSDK 1.8.2作为举例对象</h3>

<h4>1.查看.a文件支持的CPU架构</h4>

<blockquote><p>lipo -info <em>input_file</em></p>

<p>lipo -detailed_info <em>input_file</em></p></blockquote>

<pre><code class="bash">➜  workspace lipo -info libWeChatSDK.a 
Architectures in the .a文件: libWeChatSDK.a are: i386 armv7 armv7s x86_64 arm64 

➜  workspace lipo -detailed_info libWeChatSDK.a
Fat header in: libWeChatSDK.a
fat_magic 0xcafebabe
nfat_arch 5
architecture i386
    cputype CPU_TYPE_I386
    cpusubtype CPU_SUBTYPE_I386_ALL
    offset 108
    size 3247680
    align 2^2 (4)
architecture armv7
    cputype CPU_TYPE_ARM
    cpusubtype CPU_SUBTYPE_ARM_V7
    offset 3247788
    size 3256064
    align 2^2 (4)
architecture armv7s
    cputype CPU_TYPE_ARM
    cpusubtype CPU_SUBTYPE_ARM_V7S
    offset 6503852
    size 3255048
    align 2^2 (4)
architecture x86_64
    cputype CPU_TYPE_X86_64
    cpusubtype CPU_SUBTYPE_X86_64_ALL
    offset 9758904
    size 3363856
    align 2^3 (8)
architecture arm64
    cputype CPU_TYPE_ARM64
    cpusubtype CPU_SUBTYPE_ARM64_ALL
    offset 13122760
    size 3704912
    align 2^3 (8)
➜  workspace 
</code></pre>

<h4>2..a文件 CPU架构拆分</h4>

<blockquote><p>lipo 静态库源文件路径 -thin CPU架构名称 -output 拆分后文件存放路径</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  workspace lipo -info libWeChatSDK-armv7
</span><span class='line'>input file libWeChatSDK-armv7 is not a fat file
</span><span class='line'>Non-fat file: libWeChatSDK-armv7 is architecture: armv7
</span></code></pre></td></tr></table></div></figure>


<h4>3.合并两个 .a文件s</h4>

<blockquote><p>lipo -create 静态库存放路径1  静态库存放路径2 &hellip;  -output 整合后存放的路径</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  workspace lipo -create libWeChatSDK-armv7 libWeChatSDK-i386 -o libWeChatSDK-i386+armv7
</span><span class='line'>➜  workspace lipo -info libWeChatSDK-i386+armv7
</span><span class='line'>Architectures in the fat file: libWeChatSDK-i386+armv7 are: armv7 i386
</span><span class='line'>➜  workspace
</span><span class='line'>
</span><span class='line'>➜  workspace lipo -create libWeChatSDK.a TYRZSD.a -o combine-library.a
</span><span class='line'>fatal error: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/lipo: libWeChatSDK.a and TYRZSD.a have the same architectures <span class="o">(</span>i386<span class="o">)</span> and can<span class="err">&#39;</span>t be in the same fat output file
</span></code></pre></td></tr></table></div></figure>


<p>这里需要注意一下,如果要合并的两个.a 文件含有相同的架构的话,会报如上的错误. 这种情况下怎么合并,可参照下一个章节</p>

<h4>4.用 lipo 删除某些平台</h4>

<blockquote><p>$ lipo input_file -remove i386 -output output_file</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  workspace lipo libWeChatSDK.a -remove i386 -o libWeChatSDK-noi386
</span><span class='line'>➜  workspace lipo -info libWeChatSDK-noi386
</span><span class='line'>Architectures in the fat file: libWeChatSDK-noi386 are: armv7 armv7s x86_64 arm64
</span></code></pre></td></tr></table></div></figure>


<h3>lipo命令合并.a文件, detail</h3>

<h4>1.分离出上述不同 .a 文件单独支持的架构版本，比如上述 libWeChatSDK.a 和 TYRZSD.a 支持 armv7 armv7s i386 x86_64 arm64，那么就需要分离出单独支持armv7 armv7s i386 x86_64 arm64的 .a 文件</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  workspace lipo libWeChatSDK.a -thin armv7 -o libWeChatSDK-armv7
</span><span class='line'>➜  workspace lipo TYRZSD.a -thin armv7 -o TYRZSD-armv7
</span></code></pre></td></tr></table></div></figure>


<h4>2.分离出.a库的目标文件（.o)</h4>

<blockquote><p> ar -x 静态链接库</p></blockquote>

<p>因为 .a 库分离出来的目标文件 .o  会很多, 所以, 最好是在工作空间根据不同的CPU建立不同的文件夹</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  workspace mkdir armv7
</span><span class='line'>➜  workspace <span class="nb">cd </span>armv7
</span><span class='line'>➜  armv7
</span><span class='line'>➜  armv7 ar -x ../libWeChatSDK-armv7
</span><span class='line'>➜  armv7 ls
</span><span class='line'>AppCommunicate.o          MTAPlugin.o               OpenUDID.o
</span><span class='line'>AppCommunicateData.o      MTAPluginIDFA.o           WXApi.o
</span><span class='line'>GCDAsyncSocket.o          MTAPluginInstall.o        WXApiObject.o
</span><span class='line'>MTA.o                     MTAPluginNotify.o         WXLogUtil.o
</span><span class='line'>MTABaseFunction.o         MTAReachability.o         WapAuthHandler.o
</span><span class='line'>MTAConfig.o               MTASendItem.o             WeChatApiUtil.o
</span><span class='line'>MTADataConfigHolder.o     MTASocket.o               WeChatRegister.o
</span><span class='line'>MTAEnv.o                  MTASpeedTestPlugin.o      WechatAuthSDK.o
</span><span class='line'>MTAEvent.o                MTAStore.o                __.SYMDEF
</span><span class='line'>MTAExtStoragePlugin.o     MTATempID.o               base64.o
</span><span class='line'>MTAHelper.o               MTAWX.o
</span><span class='line'>MTAMidPlugin.o            NSMutableArray+MTAQueue.o
</span><span class='line'>➜  armv7 ar -x ../TYRZSD-armv7
</span><span class='line'>➜  armv7 ls
</span><span class='line'>AppCommunicate.o          MTAReachability.o         UAOpenInfo.o
</span><span class='line'>AppCommunicateData.o      MTASendItem.o             UASession.o
</span><span class='line'>GCDAsyncSocket.o          MTASocket.o               UATimer.o
</span><span class='line'>MTA.o                     MTASpeedTestPlugin.o      UAUtil.o
</span><span class='line'>MTABaseFunction.o         MTAStore.o                WXApi.o
</span><span class='line'>MTAConfig.o               MTATempID.o               WXApiObject.o
</span><span class='line'>MTADataConfigHolder.o     MTAWX.o                   WXLogUtil.o
</span><span class='line'>MTAEnv.o                  NSMutableArray+MTAQueue.o WapAuthHandler.o
</span><span class='line'>MTAEvent.o                OpenUDID.o                WeChatApiUtil.o
</span><span class='line'>MTAExtStoragePlugin.o     TYRZSDK.o                 WeChatRegister.o
</span><span class='line'>MTAHelper.o               TYRZSDK_vers.o            WechatAuthSDK.o
</span><span class='line'>MTAMidPlugin.o            UAAuthViewController.o    __.SYMDEF
</span><span class='line'>MTAPlugin.o               UACrypto.o                __.SYMDEF SORTED
</span><span class='line'>MTAPluginIDFA.o           UAHTTP.o                  base64.o
</span><span class='line'>MTAPluginInstall.o        UALogReport.o
</span><span class='line'>MTAPluginNotify.o         UANetwork.o
</span></code></pre></td></tr></table></div></figure>


<h4>3.对支持同个架构的.o文件，进行合并成静态库。</h4>

<blockquote><p>libtool -static -o output_file *.o</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  armv7 libtool -static -o ../combine-library-armv7 *.o
</span><span class='line'>➜  armv7 ls ..
</span><span class='line'>TYRZSD-armv7          armv7                 libWeChatSDK-armv7    libWeChatSDK.a
</span><span class='line'>TYRZSD.a              combine-library-armv7 libWeChatSDK-i386
</span><span class='line'>➜  armv7
</span></code></pre></td></tr></table></div></figure>


<h4>4.合成支持全部架构的通用静态库</h4>

<p>如果之前的步骤不出错, 就会得到5个.a文件; combine-library-armv7 combine-library-armv7s combine-library-i386 combine-library-x86_64 combine-library-arm64</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  workspace lipo -create combine-library-armv7 combine-library-armv7s combine-library-i386 combine-library-x86_64 combine-library-arm64 -o combine-library
</span></code></pre></td></tr></table></div></figure>


<p>​    combine-library 就是最终需要的 .a 库</p>

<h3>参考链接</h3>

<p><a href="https://blog.csdn.net/qq_26968709/article/details/51164104">合并多个.a文件</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[秘钥格式 证书]]></title>
    <link href="http://douxinchun.github.io/blog/20180718/rsa-key-structuress.html"/>
    <updated>2018-07-18T17:17:34+08:00</updated>
    <id>http://douxinchun.github.io/blog/20180718/rsa-key-structuress</id>
    <content type="html"><![CDATA[<p>RSA秘钥存储一般有两种格式</p>

<ul>
<li>DER</li>
<li>PEM</li>
</ul>


<h3>DER</h3>

<p> DER: Distinguished Encoding Rules(可辨别编码规则)，是ASN.1的一种。
 ASN.1: Abstract Syntax Notation One(抽象语法标记)，ASN.1是一种 ISO/ITU-T 标准，描述了一种对数据进行表示、编码、传输和解码的数据格式。它提供了一整套正规的格式用于描述对象的结构，而不管语言上如何执行及这些数据的具体指代，也不用去管到底是什么样的应用程序。
证书信息一般以二进制的DER格式存储在文件中以供RSA，SSL使用。</p>

<h3>PEM ( Privacy Enhanced Mail )</h3>

<p>DER一般是二进制文件形式存储，打印性较差，因此对DER内容进行base64编码，并补充说明key类型的头和尾就构成了PEM</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-----BEGIN PUBLIC KEY-----
</span><span class='line'>MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDMYfnvWtC8Id5bPKae5yXSxQTt
</span><span class='line'>+Zpul6AnnZWfI2TtIarvjHBFUtXRo96y7hoL4VWOPKGCsRqMFDkrbeUjRrx8iL91
</span><span class='line'>4/srnyf6sh9c8Zk04xEOpK1ypvBz+Ks4uZObtjnnitf0NBGdjMKxveTq+VE7BWUI
</span><span class='line'>yQjtQ8mbDOsiLLvh7wIDAQAB
</span><span class='line'>-----END PUBLIC KEY-----</span></code></pre></td></tr></table></div></figure>


<p>因此PEM,DER实质内容是相同的。</p>

<blockquote><p>上面提到key以一定的结构存储的，不同的结构，补充的元信息也不同主要有两种组织形式PKCS#1,PKCS#8</p></blockquote>

<h3>PEM的简单介绍</h3>

<p>PEM全称是Privacy Enhanced     ，该标准定义了加密一个准备要发送邮件的标准 。它的基本流程是这样的：</p>

<ol>
<li><p>信息转换为ASCII码或其它编码方式；  </p></li>
<li><p>使用对称算法加密转换了的邮件信息；  </p></li>
<li><p>使用BASE64对加密后的邮件信息进行编码；  </p></li>
<li><p>使用一些头定义对信息进行封装，这些头信息格式如下（不一定都需要，可选的 ）：    </p>

<blockquote><p>Proc-Type,4:ENCRYPTED   <br/>
 DEK-Info: cipher-name, ivec    </p></blockquote>

<p>其中，第一个头信息标注了该文件是否进行了加密，该头信息可能的值包括ENCRY PTED(信息已经加密和签名)、MIC-ONLY(信息经过数字签名但没有加密)、MIC-CLEAR(信 息经过数字签名但是没有加密、也没有进行编码，可使用非PEM格式阅读)以及CLEAR(信 息没有签名和加密并且没有进行编码，该项好象是openssl自身的扩展，但是并没有真正 实现)；；第二个头信息标注了加密的算法以及使用的ivec参量，ivec其实在这儿提供的 应该是一个随机产生的数据序列，与块加密算法中要使用到的初始化变量（IV）不一样 。  </p></li>
<li><p>在这些信息的前面加上如下形式头标注信息：  </p>

<p> &mdash;&ndash;BEGIN PRIVACY-ENHANCED MESSAGE&mdash;&ndash;  </p>

<p> 在这些信息的后面加上如下形式尾标注信息：  </p>

<p>&mdash;&ndash;END PRIVACY-ENHANCED MESSAGE&mdash;&ndash;  </p></li>
</ol>


<p>上面是openssl的PEM文件的基本结构，需要注意的是，Openssl并没有实现PEM的全 部标准，它只是对openssl中需要使用的一些选项做了实现，详细的PEM格式，请参考RF C1421－1424。  </p>

<p>   下面是一个PEM编码的经过加密的DSA私钥的例子：  </p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-----BEGIN DSA PRIVATE KEY-----     
</span><span class='line'>Proc-Type: 4,ENCRYPTED     
</span><span class='line'>DEK-Info: DES-EDE3-CBC,F80EEEBEEA7386C4     
</span><span class='line'>BASE64 ENCODED DATA
</span><span class='line'>-----END DSA PRIVATE KEY-----   </span></code></pre></td></tr></table></div></figure>


<p>     有时候PEM编码的东西并没有经过加密，只是简单进行了BASE64编码，下面是一个没 有加密的证书请求的例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-----BEGIN CERTIFICATE REQUEST-----     
</span><span class='line'>BASE64 ENCODED DATA
</span><span class='line'>-----END CERTIFICATE REQUEST----- </span></code></pre></td></tr></table></div></figure>


<p>    可以看到，该文件没有了前面两个头信息。大家如果经常使用openssl的应用程序， 就对这些文件格式很熟悉了。</p>

<h3>PKCS#1</h3>

<p>PKCS#1结构仅为RSA设计</p>

<ul>
<li>PEM形式</li>
</ul>


<p>PublicKey</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-----BEGIN RSA PUBLIC KEY-----
</span><span class='line'>BASE64 ENCODED DATA
</span><span class='line'>-----END RSA PUBLIC KEY-----</span></code></pre></td></tr></table></div></figure>


<p>PrivateKey</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>BASE64 ENCODED DATA
</span><span class='line'>-----END RSA PRIVATE KEY-----</span></code></pre></td></tr></table></div></figure>


<ul>
<li>DER的结构</li>
</ul>


<p>PublicKey</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RSAPublicKey ::= SEQUENCE {
</span><span class='line'>modulus           INTEGER,  -- n
</span><span class='line'>publicExponent    INTEGER   -- e
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>PrivateKey</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RSAPrivateKey ::= SEQUENCE {
</span><span class='line'>version           Version,
</span><span class='line'>modulus           INTEGER,  -- n
</span><span class='line'>publicExponent    INTEGER,  -- e
</span><span class='line'>privateExponent   INTEGER,  -- d
</span><span class='line'>prime1            INTEGER,  -- p
</span><span class='line'>prime2            INTEGER,  -- q
</span><span class='line'>exponent1         INTEGER,  -- d mod (p-1)
</span><span class='line'>exponent2         INTEGER,  -- d mod (q-1)
</span><span class='line'>coefficient       INTEGER,  -- (inverse of q) mod p
</span><span class='line'>otherPrimeInfos   OtherPrimeInfos OPTIONAL
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>PKCS#8</h3>

<p>X509,SSL支持的算法不仅仅是RSA，因此产生了更具有通用性的PKCS#8</p>

<ul>
<li>PEM</li>
</ul>


<p>PublicKey</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-----BEGIN PUBLIC KEY-----
</span><span class='line'>BASE64 ENCODED DATA
</span><span class='line'>-----END PUBLIC KEY-----</span></code></pre></td></tr></table></div></figure>


<p>PrivateKey</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-----BEGIN PRIVATE KEY-----
</span><span class='line'>BASE64 ENCODED DATA
</span><span class='line'>-----END PRIVATE KEY-----</span></code></pre></td></tr></table></div></figure>


<ul>
<li>DER</li>
</ul>


<p>PublicKey</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PublicKeyInfo ::= SEQUENCE {
</span><span class='line'>    algorithm       AlgorithmIdentifier,
</span><span class='line'>    PublicKey       BIT STRING
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>AlgorithmIdentifier ::= SEQUENCE {
</span><span class='line'>    algorithm       OBJECT IDENTIFIER,
</span><span class='line'>    parameters      ANY DEFINED BY algorithm OPTIONAL
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>RSA公钥的OID 为 1.2.840.113549.1.1.1</p>

<p>PrivateKey</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PrivateKeyInfo ::= SEQUENCE {
</span><span class='line'>    version         Version,
</span><span class='line'>    algorithm       AlgorithmIdentifier,
</span><span class='line'>    PrivateKey      BIT STRING
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>AlgorithmIdentifier ::= SEQUENCE {
</span><span class='line'>    algorithm       OBJECT IDENTIFIER,
</span><span class='line'>    parameters      ANY DEFINED BY algorithm OPTIONAL
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>RSA私钥的OID 为 1.2.840.113549.1.1.1</p>

<p>与PKCS#1相比将文件包含的加密算法和Key分开存储，因此可以存储其他加密算法的Key</p>

<h3>SSL</h3>

<p><strong>SSL</strong> - Secure Sockets Layer,现在应该叫&#8221;TLS&#8221;,但由于习惯问题,我们还是叫&#8221;SSL&#8221;比较多.http协议默认情况下是不加密内容的,这样就很可能在内容传播的时候被别人监听到,对于安全性要求较高的场合,必须要加密,https就是带加密的http协议,而https的加密是基于SSL的,它执行的是一个比较下层的加密,也就是说,在加密前,你的服务器程序在干嘛,加密后也一样在干嘛,不用动,这个加密对用户和开发者来说都是透明的.More:[<a href="http://en.wikipedia.org/wiki/Transport_Layer_Security">维基百科</a>]</p>

<p><strong>OpenSSL</strong> - 简单地说,OpenSSL是SSL的一个实现,SSL只是一种规范.理论上来说,SSL这种规范是安全的,目前的技术水平很难破解,但SSL的实现就可能有些漏洞,如著名的&#8221;心脏出血&#8221;.OpenSSL还提供了一大堆强大的工具软件,强大到90%我们都用不到.</p>

<h3>证书标准</h3>

<p><strong>X.509</strong> - 这是一种证书标准,主要定义了证书中应该包含哪些内容.其详情可以参考RFC5280,SSL使用的就是这种证书标准.</p>

<h3>相关的文件扩展名</h3>

<p>这是比较误导人的地方,虽然我们已经知道有PEM和DER这两种编码格式,但文件扩展名并不一定就叫&#8221;PEM&#8221;或者&#8221;DER&#8221;,常见的扩展名除了PEM和DER还有以下这些,它们除了编码格式可能不同之外,内容也有差别,但大多数都能相互转换编码格式.</p>

<p><strong>CRT</strong> - CRT应该是certificate的三个字母,其实还是证书的意思,常见于*NIX系统,有可能是PEM编码,也有可能是DER编码,大多数应该是PEM编码,相信你已经知道怎么辨别.</p>

<p><strong>CER</strong> - 还是certificate,还是证书,常见于Windows系统,同样的,可能是PEM编码,也可能是DER编码,大多数应该是DER编码.</p>

<p><strong>KEY</strong> - 通常用来存放一个公钥或者私钥,并非X.509证书,编码同样的,可能是PEM,也可能是DER.
查看KEY的办法: openssl rsa -in mykey.key -text -noout
如果是DER格式的话,同理应该这样了: openssl rsa -in mykey.key -text -noout <strong>-inform der</strong></p>

<p><strong>CSR</strong> - Certificate Signing Request,即证书签名请求,这个并不是证书,而是向权威证书颁发机构获得签名证书的申请,其核心内容是一个公钥(当然还附带了一些别的信息),在生成这个申请的时候,同时也会生成一个私钥,私钥要自己保管好.做过iOS APP的朋友都应该知道是怎么向苹果申请开发者证书的吧.
查看的办法: openssl req -noout -text -in my.csr (如果是DER格式的话照旧加上-inform der,这里不写了)</p>

<p><strong>PFX/P12</strong> - predecessor of PKCS#12,对*nix服务器来说,一般CRT和KEY是分开存放在不同文件中的,但Windows的IIS则将它们存在一个PFX文件中,(因此这个文件包含了证书及私钥)这样会不会不安全？应该不会,PFX通常会有一个&#8221;提取密码&#8221;,你想把里面的东西读取出来的话,它就要求你提供提取密码,PFX使用的时DER编码,如何把PFX转换为PEM编码？
openssl pkcs12 -in for-iis.pfx -out for-iis.pem -nodes
这个时候会提示你输入提取代码. for-iis.pem就是可读的文本.
生成pfx的命令类似这样:openssl pkcs12 -export -in certificate.crt -inkey privateKey.key -out certificate.pfx -certfile CACert.crt</p>

<p>其中CACert.crt是CA(权威证书颁发机构)的根证书,有的话也通过-certfile参数一起带进去.这么看来,PFX其实是个证书密钥库.</p>

<p><strong>JKS</strong> - 即Java Key Storage,这是Java的专利,跟OpenSSL关系不大,利用Java的一个叫&#8221;keytool&#8221;的工具,可以将PFX转为JKS,当然了,keytool也能直接生成JKS,不过在此就不多表了.</p>

<h3>证书编码的转换</h3>

<p><strong>PEM转为DER</strong> openssl x509 -in cert.crt -outform der -out cert.der</p>

<p><strong>DER转为PEM</strong> openssl x509 -in cert.crt -inform der -outform pem -out cert.pem</p>

<p>(提示:要转换KEY文件也类似,只不过把x509换成rsa,要转CSR的话,把x509换成req&hellip;)</p>

<h3>使用openssl生成秘钥</h3>

<p>生成2048位RSA秘钥，使用3des加密秘钥文件private.pem</p>

<blockquote><p>openssl genrsa -des3 -out private.pem 2048</p></blockquote>

<p>导出公钥，默认为PKCS#8结构</p>

<blockquote><p>openssl rsa -in private.pem -outform PEM -pubout -out public.pem</p></blockquote>

<p>导出PKCS#1结构的公钥，注意openssl版本，老版本可能不支持</p>

<blockquote><p>openssl rsa -in private.pem -outform DER <strong>-RSAPublicKey_out</strong> -out public_pcks1.cer</p></blockquote>

<p>导出无加密保护的私钥</p>

<blockquote><p>openssl rsa -in private.pem -out private_unencrypted.pem -outform PEM</p></blockquote>

<h3>参考资料</h3>

<p><a href="https://medium.com/@oyrxx/rsa%E7%A7%98%E9%92%A5%E4%BB%8B%E7%BB%8D%E5%8F%8Aopenssl%E7%94%9F%E6%88%90%E5%91%BD%E4%BB%A4-d3fcc689513f">秘钥格式</a></p>

<p><a href="https://tls.mbed.org/kb/cryptography/asn1-key-structures-in-der-and-pem">ASN.1 key structures in DER and PEM</a></p>

<p><a href="https://www.cnblogs.com/guogangj/p/4118605.html">[那些证书相关的玩意儿(SSL,X.509,PEM,DER,CRT,CER,KEY,CSR,P12等)](https://www.cnblogs.com/guogangj/p/4118605.html)</a></p>

<p><a href="https://groups.google.com/forum/#!topic/cn.bbs.comp.security/90Z0inkJ3lo">openssl之PEM系列之1&mdash;PEM编码文件结构介绍</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X 下生成RSA密钥对]]></title>
    <link href="http://douxinchun.github.io/blog/20180718/generate-rsa-key-on-mac-os-x.html"/>
    <updated>2018-07-18T15:15:18+08:00</updated>
    <id>http://douxinchun.github.io/blog/20180718/generate-rsa-key-on-mac-os-x</id>
    <content type="html"><![CDATA[<p>Mac自带OpenSSL,可以利用openssl来生成RSA密钥对</p>

<p>1.生成私钥,1024指密钥的长度</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  <span class="nb">test </span>openssl genrsa -out private_key.pem 1024
</span><span class='line'>Generating RSA private key, <span class="m">1024</span> bit long modulus
</span><span class='line'>.......................................................................++++++
</span><span class='line'>.......................................................................++++++
</span><span class='line'>e is <span class="m">65537</span> <span class="o">(</span>0x10001<span class="o">)</span>
</span><span class='line'>➜  <span class="nb">test </span>cat private_key.pem
</span><span class='line'>-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>MIICXQIBAAKBgQDJrT1W3ZyBAYIMNb0XDBQTIGw4TpbrLelQ/K6Yl6abciAUAZNn
</span><span class='line'>j5EHlFhMvpe3iHU0xPIcTM0IM9ZnMjecikHC4lBJ0JmXEsHf4j6Cf2+KRFHTaxPP
</span><span class='line'>hqf65wiGvduTf70xOCvaPeyYVu4x69jm2rtxOeVvF1PJSrV+ZDCoDmYD3QIDAQAB
</span><span class='line'>AoGAToUwmJ13zZJ0u6RAlrSRLFE3UUTn5XDeojV/FNIWf/cTHjbu2SdAZB8Rse+S
</span><span class='line'>ylZKq9zyFqqgOU1VcKBQnpYFu9XFvpoP/xGC/T99MN3chBaQY4wY80FM8NEjWZbP
</span><span class='line'>ZPTczE/HypE+J14/0i0x6jujhFiAAmcE/1ivRzRGvo6qC9ECQQDmcki4jO4VTju7
</span><span class='line'>+WWINatj36pPn/JVUFH8Tqw98tQLg5VMPFfPNsl9L7CSqACCFvl1wiERuxfunRB0
</span><span class='line'>9dNHb4sHAkEA4ApECRgqo+/7Smd2WTa4hSQ+aYs6J7+9e8zjgfIuYBn5ONOsuIuV
</span><span class='line'>VntHyhSc2Xzbp1wkakCzTy/Tyw02kGCs+wJBAMFLHPpHo7AVRf9+yo48zjzgr99H
</span><span class='line'>/yFWVN54MvtnQjtCLKmcd97kSo+Jv+bTqlFz6dy/b7OKpiFMdzBTvdtOkWMCQQC6
</span><span class='line'>21ULUMCfopQv5kLq/ZzATw5O8PQ8Gstq6eQGiXrsZD1cjA9Oi/yt+HxTqwV2z5BT
</span><span class='line'>8aHdjMEAlp9Kh2au3DLpAkB+koitVpjxmWyzQ/Sl4Xa843oR+qneofZZ3m9johtn
</span><span class='line'>+7NQu3JXI1xBckxmZ4DtODtC7MUIqlOEej5OT9QVwljv
</span><span class='line'>-----END RSA PRIVATE KEY-----
</span></code></pre></td></tr></table></div></figure>


<p>2.生成公钥</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  <span class="nb">test </span>openssl rsa -in private_key.pem -pubout -out public_key.pem
</span><span class='line'>writing RSA key
</span><span class='line'>➜  <span class="nb">test </span>cat public_key.pem
</span><span class='line'>-----BEGIN PUBLIC KEY-----
</span><span class='line'>MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDJrT1W3ZyBAYIMNb0XDBQTIGw4
</span><span class='line'>TpbrLelQ/K6Yl6abciAUAZNnj5EHlFhMvpe3iHU0xPIcTM0IM9ZnMjecikHC4lBJ
</span><span class='line'>0JmXEsHf4j6Cf2+KRFHTaxPPhqf65wiGvduTf70xOCvaPeyYVu4x69jm2rtxOeVv
</span><span class='line'>F1PJSrV+ZDCoDmYD3QIDAQAB
</span><span class='line'>-----END PUBLIC KEY-----
</span></code></pre></td></tr></table></div></figure>


<p>3.使用pkcs8命令转换私钥格式 PKCS标准</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  <span class="nb">test </span>openssl pkcs8 -topk8 -inform PEM -in private_key.pem -outform PEM -nocrypt
</span><span class='line'>-----BEGIN PRIVATE KEY-----
</span><span class='line'>MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAMmtPVbdnIEBggw1
</span><span class='line'>vRcMFBMgbDhOlust6VD8rpiXpptyIBQBk2ePkQeUWEy+l7eIdTTE8hxMzQgz1mcy
</span><span class='line'>N5yKQcLiUEnQmZcSwd/iPoJ/b4pEUdNrE8+Gp/rnCIa925N/vTE4K9o97JhW7jHr
</span><span class='line'>2Obau3E55W8XU8lKtX5kMKgOZgPdAgMBAAECgYBOhTCYnXfNknS7pECWtJEsUTdR
</span><span class='line'>ROflcN6iNX8U0hZ/9xMeNu7ZJ0BkHxGx75LKVkqr3PIWqqA5TVVwoFCelgW71cW+
</span><span class='line'>mg//EYL9P30w3dyEFpBjjBjzQUzw0SNZls9k9NzMT8fKkT4nXj/SLTHqO6OEWIAC
</span><span class='line'>ZwT/WK9HNEa+jqoL0QJBAOZySLiM7hVOO7v5ZYg1q2Pfqk+f8lVQUfxOrD3y1AuD
</span><span class='line'>lUw8V882yX0vsJKoAIIW+XXCIRG7F+6dEHT100dviwcCQQDgCkQJGCqj7/tKZ3ZZ
</span><span class='line'>NriFJD5pizonv717zOOB8i5gGfk406y4i5VWe0fKFJzZfNunXCRqQLNPL9PLDTaQ
</span><span class='line'>YKz7AkEAwUsc+kejsBVF/37KjjzOPOCv30f/IVZU3ngy+2dCO0IsqZx33uRKj4m/
</span><span class='line'>5tOqUXPp3L9vs4qmIUx3MFO9206RYwJBALrbVQtQwJ+ilC/mQur9nMBPDk7w9Dwa
</span><span class='line'>y2rp5AaJeuxkPVyMD06L/K34fFOrBXbPkFPxod2MwQCWn0qHZq7cMukCQH6SiK1W
</span><span class='line'>mPGZbLND9KXhdrzjehH6qd6h9lneb2OiG2f7s1C7clcjXEFyTGZngO04O0LsxQiq
</span><span class='line'><span class="nv">U4R6Pk5P1BXCWO8</span><span class="o">=</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[低版本Xcode调试高版本的iOS系统]]></title>
    <link href="http://douxinchun.github.io/blog/20180713/debug-application-on-newer-ios-from-an-older-xcode.html"/>
    <updated>2018-07-13T17:10:45+08:00</updated>
    <id>http://douxinchun.github.io/blog/20180713/debug-application-on-newer-ios-from-an-older-xcode</id>
    <content type="html"><![CDATA[<p>在使用Xcode作为iOS开发的主IDE的情况下,遇到这种情况最好是AppStore中安装最新版本的Xcode.</p>

<p>下面的方案只是一个临时debug的方案</p>

<h5>1.找到不支持的iOS版本,Xcode中可以使用快捷键: Cmd+Shift+2 ,下图表示不支持的版本是 iOS 12.0 (16A5318d)</h5>

<p><img src="http://p64xrfkn6.bkt.clouddn.com/blog_reference_image/2018/7/1-1.png" alt="Could not locate device support files" /></p>

<h5>2.Terminal cd 到Xcode DeviceSupport 目录下</h5>

<blockquote><p>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜ <span class="nb">cd</span> /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport
</span><span class='line'>➜  DeviceSupport ls
</span><span class='line'>10.0         10.3         11.2         8.0          8.3          9.1
</span><span class='line'>10.1         11.0         11.3         8.1          8.4          9.2
</span><span class='line'>10.2         11.1         11.4 <span class="o">(</span>15F79<span class="o">)</span> 8.2          9.0          9.3
</span><span class='line'>➜  DeviceSupport
</span></code></pre></td></tr></table></div></figure>


<h5>3.Important 去网上搜索真机支持包,可以输出关键字&#8221;xcode 12.0 (16A5318d) 真机支持包&#8221;,一般情况下百度网盘中都会有,下载下来,copy到2的目录下,然后重启Xcode,搞定</h5>

<h5>4.不下载真机支持包的方案</h5>

<p>直接拷贝一个DeviceSupport现有的支持版本,重命名为 12.0 (16A5318d), 重启Xcode后搞定.<br/>
注意这里需要用到root权限,命令前加sudo即可.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  DeviceSupport sudo cp -rf 11.4<span class="se">\ \(</span>15F79<span class="se">\)</span> 12.0<span class="se">\ \(</span>16A5318d<span class="se">\)</span>
</span><span class='line'>Password:
</span><span class='line'>➜  DeviceSupport ls
</span><span class='line'>10.0            11.0            11.4 <span class="o">(</span>15F79<span class="o">)</span>    8.2             9.1
</span><span class='line'>10.1            11.1            12.0 <span class="o">(</span>16A5318d<span class="o">)</span> 8.3             9.2
</span><span class='line'>10.2            11.2            8.0             8.4             9.3
</span><span class='line'>10.3            11.3            8.1             9.0             xinchun
</span><span class='line'>➜  DeviceSupport
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://p64xrfkn6.bkt.clouddn.com/blog_reference_image/2018/7/1-2.png" alt="success screenshot" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcodebuild 使用注意事项]]></title>
    <link href="http://douxinchun.github.io/blog/20180516/xcodebuild-shi-yong-zhu-yi-shi-xiang.html"/>
    <updated>2018-05-16T11:17:34+08:00</updated>
    <id>http://douxinchun.github.io/blog/20180516/xcodebuild-shi-yong-zhu-yi-shi-xiang</id>
    <content type="html"><![CDATA[<h2>1.xcodebuild cocoapod CONFIGURATION_BUILD_DIR</h2>

<h3>现象</h3>

<figure class='code'><figcaption><span>xcodebuild命令用法示例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xcodebuild -sdk iphoneos -configuration <span class="k">${</span><span class="nv">BUILD_CONFIGURATION</span><span class="k">}</span> -derivedDataPath<span class="o">=</span><span class="s2">&quot;../build&quot;</span> -workspace <span class="s1">&#39;../SohuInk.xcworkspace&#39;</span> -scheme <span class="s1">&#39;SohuInk_Jenkins&#39;</span> -archivePath <span class="s2">&quot;../SohuInk_Jenkins.xcarchive&quot;</span> archive
</span></code></pre></td></tr></table></div></figure>


<p>如果项目中使用了cocoapod并且xcodebuild 命令参数中指定了CONFIGURATION_BUILD_DIR并且值为相对路径,此时在Xcode Tools Version 5.0下的xcodebuild构建会报如下错误:</p>

<figure class='code'><figcaption><span>error_info</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ld: warning: directory not found <span class="k">for</span> option <span class="s1">&#39;-L/XXXX/XXXX/pop&#39;</span>
</span><span class='line'>ld: library not found <span class="k">for</span> -lAFNetworking
</span><span class='line'>clang: error: linker <span class="nb">command </span>failed with <span class="nb">exit </span>code <span class="m">1</span> <span class="o">(</span>use -v to see invocation<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>** ARCHIVE FAILED **
</span><span class='line'>
</span><span class='line'>The following build commands failed:
</span><span class='line'>  Ld /Users/XXXX/XXXX/Objects-normal/arm64/SohuInk normal arm64
</span><span class='line'>  Ld /Users/XXXX/XXXX normal armv7
</span><span class='line'><span class="o">(</span><span class="m">2</span> failures<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>解决方案</h3>

<h4>方案1,不好用</h4>

<p>Xcode Tools version 5.0 支持参数 derivedDataPath 可以放弃CONFIGURATION_BUILD_DIR配置指定该参数,我实际操作是发现使用相对路径的情况下,虽然可以archive success,但是build的目录没有改变,依然在xcode默认的derivedData目录下.</p>

<h4>方案2,OK</h4>

<p>CONFIGURATION_BUILD_DIR的值指定为绝对路径,一切OK,可成功archive.</p>

<h3>结论</h3>

<blockquote><p>xcodebuild中的CONFIGURATION_BUILD_DIR值需要使用绝对路径</p></blockquote>

<h2>参考链接</h2>

<p><a href="https://stackoverflow.com/questions/11965040/xcodebuilding-a-workspace-and-setting-a-custom-build-path/12259098#12259098">Stackoverflow上关于使用xcodebuild CONFIGURATION_BUILD_DIR最好使用绝对路径的说明 @Chilloutman</a><br/>
<a href="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html">https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Terminal 快捷键记录]]></title>
    <link href="http://douxinchun.github.io/blog/20180501/mac-terminal-shortcut-keys.html"/>
    <updated>2018-05-01T18:16:04+08:00</updated>
    <id>http://douxinchun.github.io/blog/20180501/mac-terminal-shortcut-keys</id>
    <content type="html"><![CDATA[<p>Mac 命令行编辑快捷键的方法，对Mac的应用有所帮助。</p>

<h3>Mac 命令行命令</h3>

<table>
<thead>
<tr>
<th>Command      </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>history      </td>
<td> 显示命令历史列表</td>
</tr>
<tr>
<td>↑(Ctrl+p)    </td>
<td> 显示上一条命令</td>
</tr>
<tr>
<td>↓(Ctrl+n)    </td>
<td> 显示下一条命令</td>
</tr>
<tr>
<td>clear        </td>
<td> 清除 shell 提示屏幕</td>
</tr>
<tr>
<td>exit         </td>
<td> 注销</td>
</tr>
<tr>
<td>history      </td>
<td> 显示命令历史</td>
</tr>
<tr>
<td>reset        </td>
<td> 刷新 shell 提示屏幕</td>
</tr>
</tbody>
</table>


<p><br /></p>

<h3>Mac 命令行编辑快捷键</h3>

<table>
<thead>
<tr>
<th>Command      </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>↑(Ctrl+p)    </td>
<td> 显示上一条命令</td>
</tr>
<tr>
<td>↓(Ctrl+n)    </td>
<td> 显示下一条命令</td>
</tr>
<tr>
<td>!num         </td>
<td> 执行命令历史列表的第num条命令</td>
</tr>
<tr>
<td>!!           </td>
<td> 执行上一条命令</td>
</tr>
<tr>
<td>!?string?    </td>
<td> 执行含有string字符串的最新命令</td>
</tr>
<tr>
<td>Ctrl+r       </td>
<td> 然后输入若干字符，开始向上搜索包含该字符的命令，继续按  Ctrl+r，搜索上一条匹配的命令</td>
</tr>
<tr>
<td>Ctrl+s       </td>
<td> 与Ctrl+r类似,只是正向检索</td>
</tr>
<tr>
<td>→(Ctrl+f)    </td>
<td> 光标向前移动一个字符,相当与-></td>
</tr>
<tr>
<td>←(Ctrl+b)    </td>
<td> 光标向后移动一个字符,相当与&lt;-</td>
</tr>
<tr>
<td>opt+←        </td>
<td> 光标向前移动一个单词</td>
</tr>
<tr>
<td>opt+→        </td>
<td> 光标向后移动一个单词</td>
</tr>
<tr>
<td>ls !$        </td>
<td> 执行命令ls，并以上一条命令的参数为其参数</td>
</tr>
<tr>
<td>Ctrl+a       </td>
<td> 移动到当前行的开头</td>
</tr>
<tr>
<td>Ctrl+e       </td>
<td> 移动到当前行的结尾</td>
</tr>
<tr>
<td>Esc+b        </td>
<td> 移动到当前单词的开头</td>
</tr>
<tr>
<td>Esc+f        </td>
<td> 移动到当前单词的结尾</td>
</tr>
<tr>
<td>Ctrl+l       </td>
<td> 清屏</td>
</tr>
<tr>
<td>Ctrl+u       </td>
<td> 剪切命令行中光标所在处之前的所有字符（不包括自身）</td>
</tr>
<tr>
<td>Ctrl+k       </td>
<td> 剪切命令行中光标所在处之后的所有字符（包括自身）</td>
</tr>
<tr>
<td>Ctrl+d       </td>
<td> 删除光标所在处字符</td>
</tr>
<tr>
<td>Ctrl+h       </td>
<td> 删除光标所在处前一个字符</td>
</tr>
<tr>
<td>Ctrl+y       </td>
<td> 粘贴刚才所删除的字符</td>
</tr>
<tr>
<td>Ctrl+w       </td>
<td> 剪切光标所在处之前的一个词（以空格、标点等为分隔符）</td>
</tr>
<tr>
<td>Ctrl+t       </td>
<td> 颠倒光标所在处及其之前的字符位置，并将光标移动到下一个字符</td>
</tr>
<tr>
<td>Ctrl+v       </td>
<td> 插入特殊字符,如Ctrl+v+Tab加入Tab字符键 ,先按下Ctrl+V,抬起后再按下Tab</td>
</tr>
<tr>
<td>Esc+t        </td>
<td> 颠倒光标所在处及其相邻单词的位置</td>
</tr>
<tr>
<td>Ctrl+c       </td>
<td> 删除整行</td>
</tr>
<tr>
<td>Ctrl+(x u)   </td>
<td> 按住Ctrl的同时再先后按x和u，撤销刚才的操作</td>
</tr>
<tr>
<td>Ctrl+s       </td>
<td> 挂起当前shell</td>
</tr>
<tr>
<td>Ctrl+q       </td>
<td> 重新启用挂起的shell</td>
</tr>
</tbody>
</table>


<p><br /></p>

<h3>下面的应用可能稍稍高级一点点</h3>

<table>
<thead>
<tr>
<th>Command                 </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td># !!                   </td>
<td> 上一条命令</td>
</tr>
<tr>
<td># !-n                  </td>
<td> 倒数第N条历史命令</td>
</tr>
<tr>
<td># !-n:p                </td>
<td> 打印上一条命令（不执行）</td>
</tr>
<tr>
<td># !?string?            </td>
<td> 最新一条含有“string”的命令</td>
</tr>
<tr>
<td># !-n:gs/str1/str2/    </td>
<td> 将倒数第N条命令的str1替换为str2，并执行（若不加g,则仅替换第一个)</td>
</tr>
</tbody>
</table>


<h3>参考</h3>

<p><a href="http://notes.11ten.net/mac-command-line-editing-commonly-used-shortcut-keys.html">http://notes.11ten.net/mac-command-line-editing-commonly-used-shortcut-keys.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Commands 使用手记]]></title>
    <link href="http://douxinchun.github.io/blog/20180430/git-command-shi-yong-shou-ji.html"/>
    <updated>2018-04-30T17:44:10+08:00</updated>
    <id>http://douxinchun.github.io/blog/20180430/git-command-shi-yong-shou-ji</id>
    <content type="html"><![CDATA[<p>本文主要用来记录自己在使用Git的过程遇到的一些问题及解决方案.</p>

<h2>1.Git push error: dst refspec dev_1.0 matches more than one.</h2>

<h3>导火索</h3>

<p>  Git 删除远程库中的一个分支的时候报错,如下:</p>

<pre><code class="``">  git push origin --delete dev_1.0
  error: dst refspec dev_1.0 matches more than one.
  error: failed to push some refs to 'git@xxxxx:xxx/xxx.git'
</code></pre>

<p>  出现这个错误的原因是在于远程Git服务器上名称为dev_1.0的有两个对象：一个是tag，一个是branch；在执行 git push origin &ndash;delete dev_1.0这个命令时Git服务器不知道要删除哪个。</p>

<h3>解决办法</h3>

<p>删除名称为dev_1.0的branch：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push origin :refs/heads/dev_1.0</span></code></pre></td></tr></table></div></figure>


<p>
删除名称为dev_1.0的tag:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push origin :refs/tags/dev_1.0</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[获取mobileprovision文件的UUID]]></title>
    <link href="http://douxinchun.github.io/blog/20171202/get-mobileprovison-uuid.html"/>
    <updated>2017-12-02T13:06:26+08:00</updated>
    <id>http://douxinchun.github.io/blog/20171202/get-mobileprovison-uuid</id>
    <content type="html"><![CDATA[<hr />

<h3>Provision Profile 文件在Mac OS中的默认存放位置:</h3>

<blockquote><p>~/Library/MobileDevice/Provisioning Profiles</p></blockquote>

<h3>1.通过GUI的工具查看:</h3>

<p>iPhone配置实用工具</p>

<h3>2.命令行工具</h3>

<p><a href="https://github.com/0xc010d/mobileprovision-read">0xc010d/mobileprovision-read</a><br/>
安装方法<br/>
在 Terminal中键入下面的命令并回车</p>

<figure class='code'><figcaption><span>Terminal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl https://raw.githubusercontent.com/0xc010d/mobileprovision-read/master/main.m <span class="p">|</span> clang -framework Foundation -framework Security -o /usr/local/bin/mobileprovision-read -x objective-c -
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>mobileprovision-read 命令介绍</h4>

<figure class='code'><figcaption><span>Terminal  </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  ~ mobileprovision-read
</span><span class='line'>mobileprovision-read -- mobileprovision files querying tool.
</span><span class='line'>
</span><span class='line'>USAGE
</span><span class='line'>mobileprovision-read -f fileName <span class="o">[</span>-o option<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>OPTIONS
</span><span class='line'>    <span class="nb">type</span> – prints mobileprovision profile <span class="nb">type</span> <span class="o">(</span>debug, ad-hoc, enterprise, appstore<span class="o">)</span>
</span><span class='line'>    appid – prints application identifier
</span><span class='line'>Will print raw provision<span class="s1">&#39;s plist if option is not specified.</span>
</span><span class='line'><span class="s1">You can also use key path as an option.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">EXAMPLES</span>
</span><span class='line'><span class="s1">mobileprovision-read -f test.mobileprovision -o type</span>
</span><span class='line'><span class="s1">    Prints profile type</span>
</span><span class='line'>
</span><span class='line'><span class="s1">mobileprovision-read -f test.mobileprovision -o UUID</span>
</span><span class='line'><span class="s1">    Prints profile UUID</span>
</span><span class='line'>
</span><span class='line'><span class="s1">mobileprovision-read -f test.mobileprovision -o ProvisionedDevices</span>
</span><span class='line'><span class="s1">    Prints provisioned devices UDIDs</span>
</span><span class='line'>
</span><span class='line'><span class="s1">mobileprovision-read -f test.mobileprovision -o Entitlements.get-task-allow</span>
</span><span class='line'><span class="s1">    Prints 0 if profile doesn&#39;</span>t allow debugging <span class="m">1</span> otherwise
</span><span class='line'>➜  ~
</span></code></pre></td></tr></table></div></figure>


<p>
eg:<br/>
mobileprovision-read -f &ldquo;filepath&rdquo; -o UUID  -> 打印输出mobileprovision的UUID<br/>
mobileprovision-read -f &ldquo;provisoning-profile-file-path&rdquo; -o ProvisionedDevices  -> 列出描述文件所包含的device UUID列表</p>

<h3>3.自定义脚本</h3>

<p>使用了苹果的security和PlistBuddy工具.<br/>
<a href="https://github.com/douxinchun/MyBackupForMacOSX/blob/master/shell/mobilapp.sh">mobileapp.sh</a><br/>
使用方法:<br/>
./mobileapp.sh &ldquo;provisoning-profile-file-path&rdquo;<br/>
注意,如果filepath中含有空格,请将filepath加上双引号.</p>

<p>eg:</p>

<figure class='code'><figcaption><span>Terminal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  Desktop ./mobilepp.sh <span class="s2">&quot;/Users/newspring/Library/MobileDevice/Provisioning Profiles/1213b96b-4ac1-4365-ae45-350eb6beadf2.mobileprovision&quot;</span>
</span><span class='line'>security: SecPolicySetValue: One or more parameters passed to a <span class="k">function</span> were not valid.
</span><span class='line'>UUID is:
</span><span class='line'>1213b96b-4ac1-4365-ae45-350eb6beadf2
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>参考链接</h3>

<p><a href="https://my.oschina.net/ioslighter/blog/494342">https://my.oschina.net/ioslighter/blog/494342</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install macOS by U Disk]]></title>
    <link href="http://douxinchun.github.io/blog/20170529/install-macos-by-u-disk.html"/>
    <updated>2017-05-29T16:46:55+08:00</updated>
    <id>http://douxinchun.github.io/blog/20170529/install-macos-by-u-disk</id>
    <content type="html"><![CDATA[<p>动手之前,TimeMachine备份数据!<br/>
动手之前,TimeMachine备份数据!<br/>
动手之前,TimeMachine备份数据!</p>

<ul>
<li>1.8GB或者更大容量的U盘,Apple建议不小于12G</li>
<li>2.使用 应用程序&ndash;>实用工具&ndash;>磁盘工具 格盘 (参考图片 格盘)

<ul>
<li> 名称 Sierra 使用其它名称注意在后面的Terminal命令中作出替换</li>
<li> 格式 Mac OS 扩展 (日志式)</li>
<li> 方案 GUID 分区图</li>
</ul>
</li>
<li>3.AppStore中下载Sierra系统.下载耗时较长,可以冲杯咖啡,休息一下去了.(参照图片 原版安装包)</li>
<li>4.使用Terminal(应用程序→实用工具→终端),输入命令<br/>
<code>
sudo /Applications/Install\ macOS\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/Sierra --applicationpath /Applications/Install\ macOS\ Sierra.app --nointeraction
</code>
耐心等待,直至出现Done.启动U盘制作结束.</li>
<li>5.重新启动PC,按照Option不放,直到出现启动菜单选项.
<img src="http://douxinchun.github.io/blog_reference_image/2017/7/mac_option_boot.jpg" alt="启动菜单项" /></li>
</ul>


<h3>附几张网络图片,仅供参考</h3>

<p>格盘<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/7/disk_ulitily.jpg" alt="U盘格盘" />
原版安装包<br/>
<img src="http://upload-images.jianshu.io/upload_images/3704217-1629bb87e7f7945e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原版安装包" />
步骤4,参考图
<img src="http://douxinchun.github.io/blog_reference_image/2017/7/terminal.jpg" alt="terminal-createinstallmedia" /></p>

<h3>参考资料</h3>

<p><a href="https://support.apple.com/zh-cn/HT201372">创建可引导的macOS安装器,https://support.apple.com/zh-cn/HT201372</a><br/>
<a href="http://www.iplaysoft.com/macos-usb-install-drive.html">iPlaySoft简单制作 macOS Sierra 正式版U盘USB启动安装盘方法教程</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacBook Pro (13-inch Mid 2012) 升级SSD和16G内存]]></title>
    <link href="http://douxinchun.github.io/blog/20170529/update-ssd-and-meomory-for-macbook-pro-13-inch-mid-2012.html"/>
    <updated>2017-05-29T11:52:22+08:00</updated>
    <id>http://douxinchun.github.io/blog/20170529/update-ssd-and-meomory-for-macbook-pro-13-inch-mid-2012</id>
    <content type="html"><![CDATA[<h2>我的MacBook Pro</h2>

<p>电脑配置<br/>
机器型号: MacBook Pro (13-inch, Mid 2012) 普通屏<br/>
根据苹果官网的查询 <a href="https://support.apple.com/zh-cn/HT201300">苹果官网的MBP型号查询</a> 型号应该是MD101或者MD102<br/>
处理器: 2.5 GHz Intel Core i5<br/>
原配内存: 2G*2 1600Hz DDR3<br/>
原配硬盘: 500G 机械硬盘</p>

<p>虽然现在来看,这个配置可以卡出翔来,厚度堪当砖,但是回想一下,对于当时还是在装有Windows系统的Samsung本子上, 用GNUstep来Build&amp;Run Objective_C 的我来说, 这简直就是女神一般的存在.</p>

<p>在升级到macOS Sierra后,我已经再也无法忍受启动Xcode时候的无限风火轮.原来打算购买新的MacBook Pro,去官网看了一下,新的本子为了追求超薄,内存什么的都采用了焊接的工艺,换句话说,要买就得直接上顶配,不然以后没法升级.大体预算了一下,需要软妹币小两万.摸了摸自己的口袋,想了想老丈人的礼金,含着泪默默地关闭了apple.com.打开了京东.</p>

<h2>升级方案</h2>

<p>SSD的升级方案,按照网上的介绍有三种:</p>

<ul>
<li>1.主硬盘位保持原装机械硬盘不动,光驱位替换为SSD</li>
<li>2.主硬盘位换为SSD,光驱位换为拆下来的机械硬盘</li>
<li>3.主硬盘位换为SSD,光驱位不动.</li>
</ul>


<p>在此,我的建议是,如果是Fusion类型的话(机械硬盘和SSD混用,方案1或者方案2),首先查看一下光驱位和主硬盘位的SATA串口的类型.<br/>
如果只有一个是SATA3,那么SSD放在SATA3串口的位置.<br/>
如果都是SATA3,那么主硬盘位放机械硬盘,光驱位放SSD,因为主硬盘会有SMS保护(SMS是什么后面会有介绍).但具体的要根据自己的实际情况,比如说因为光驱位的供电模式等原因造成的SSD不识别,那只能把SSD放在主硬盘位.<br/>
对我来说,我采用的是方案3,主要原因有下:<br/>
1.主硬盘位对于硬盘的保护比较好,垂直位置上和键盘不重叠,而光驱位位于键盘的正下方,相对来说不如主硬盘位稳定.<br/>
2.哥是一个纯粹的人,要什么Fusion啊,要存储的话直接上外置硬盘就好了.</p>

<h3>查看主硬盘位和光驱位SATA类型的方法</h3>

<p>关于本机&ndash;>概览&ndash;>系统报告&ndash;>SATA/SATA Express. 如图,看<strong>链接速度</strong>,SATA3为6千兆位. SATA2为3千兆位. 我的CD-ROM的<strong>协商的链接速度</strong>:1.5 千兆位. 原装硬盘的<strong>协商的链接速度</strong>为3千兆位,说明原装的机械硬盘上的串口速度最高到SATA2.<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/disk_sata.jpg" alt="SATA_disk" /><br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/cd-rom_sata.jpg" alt="SATA_cd-rom" /></p>

<h2>购买的SSD和内存</h2>

<p>购买时间正巧赶上了京东618店庆搞活动.<br/>
SSD我买的是 SAMSUNG 850 EVO 250G SATA3<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/jd_ssd.jpg" alt="JD Samsumg SSD" /><br/>
内存我买的是金士顿的8G内存条.买两条.按照Apple官网的<a href="https://support.apple.com/zh-cn/HT201165">内存升级指南</a>2012Mid的MBP最高可以升级到4G*2,可能是当年的单条8G还不是很流行,我实测直接升级到8G*2没有任何问题.<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/jd_memory.jpg" alt="JD Kingston Memory" /><br/>
另外还购买了SSK的2.5英寸的USB 3.0硬盘盒,用于装替换下来的原装硬盘.</p>

<hr />

<h2>替换SSD</h2>

<p>先来一张拆机前的准备图:<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/IMG_4026.jpg" alt="ready" /><br/>
做好Time Machine后,开始更换SSD,先拆开后盖,注意拆机前先洗手,祷告,触摸金属,释放自身静电,祈求上帝保佑:<br/>
<img src="https://support.apple.com/library/content/dam/edam/applecare/images/zh_CN/macbookpro/13_bottom_case_removal.png" alt="The location of screws" /><br/>
拆下来的螺丝,按照相对位置放好,便于以后重新安装上去. 后壳周边没有任何的暗扣,用塑料吸盘轻轻一吸就能起来.
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/IMG_4027.jpg" alt="螺丝排列" /><br/>
我曾经拆过三星,宏碁还有联想的笔记本(为了清灰,说多了都是泪),但是不得不说MBP内部光驱,硬盘,主板,风扇,电池的排列和构造简直是太完美了, 没有一处的细节不完美,没有一处的空间被浪费掉,且容我慢慢欣赏20s.<br/>
断开内存条右边的电池电源线,撬开光驱右边最下面的硬盘数据线.
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/IMG_4028.jpg" alt="拆开后盖总览" /><br/>
拆下硬盘上方的小的固定条,一共两个螺丝.<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/IMG_4032.jpg" alt="硬盘固定条" /><br/>
利用翘起的塑料小片, 轻轻拉出硬盘(注意藏在硬盘下面的排线,不要扯断了).<br/>
轻轻拔出左侧的SATA3接口,整个机械硬盘就完全拆下来了.
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/IMG_4033.jpg" alt="被拉出来的硬盘" /><br/>
按照上图的1,2,3,4的位置,把这四个螺丝拆下来,同样的位置安装到SSD上.<br/>
将SSD轻轻的装回原硬盘的位置,如下图所示,安装好以后,SSD会比原有的机械硬盘略薄一些,不过有螺丝的固定,没有影响. <br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/IMG_4035.jpg" alt="换为SSD以后效果图" /></p>

<hr />

<h2>替换内存</h2>

<p>内存条的替换没有什么可说的,具体的可以参加Apple的指南.<a href="https://support.apple.com/zh-cn/HT201165">Apple MBP 安装和拆卸内存指南</a><br/>
这里放一张基本流程的图:<br/>
<img src="https://support.apple.com/library/content/dam/edam/applecare/images/zh_CN/macbookpro/13_insert_memory.png" alt="替换内存条基本流程,引用自Apple" /><br/>
需要注意的一点是,一共上下两根条子,由于这两根条子挨得过于靠近,安装下面的条子的时候,不要把上面的条子的两边的压脚给弄坏了,金手指对齐插好以后,两边轻轻一按就能就位,要用巧劲,不要用蛮力.
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/IMG_4030.jpg" alt="替换内存" /></p>

<hr />

<h2>数据恢复</h2>

<p>插入启动U盘,开机启动,先利用磁盘工具将SSD抹掉格式化为:OS X 扩展 (日志式),GUID 分区图.然后插入Time Machine的外置硬盘,选择将Time Machine备份的最新内容恢复到刚刚格式化的SSD分区中.<br/>
小技巧:合上后盖后,先不要着急上螺丝,先插U盘,点亮机器,识别出来SSD,确认机器不报警以后,再断电上螺丝.<br/>
制作启动U盘,参见另一篇blog 传送门<a href="http://douxinchun.github.io/blog/20170529/install-macos-by-u-disk.html">U盘安装macOS系统</a></p>

<hr />

<h2>后续配置</h2>

<h3>开启Trim</h3>

<p>TRIM 是系统级的命令，可以允许操作系统与固态硬盘通信，判断 SSD 上哪些区域没有使用，并准备好擦除和复写。如果缺少 TRIM 支持，系统会在 SSD 可用容量减少时遇到写入速度变慢的现象.<br/>
可以在「关于本机」里查看系统有没有开启 TRIM 支持：<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/disk_sata.jpg" alt="SATA_disk" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo trimforce enable</span></code></pre></td></tr></table></div></figure>


<p>
命令执行后会出现警告语，根据提示输入两次「Y」以后，如图显示，就说明 TRIM 支持开启成功了（命令执行完成后会自动重启) :<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/trim_start.jpg" alt="Trim_Start" /></p>

<p>注意,旧版本的OS X系统可能需要先禁用rootless</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nvram boot-args=rootless=0</span></code></pre></td></tr></table></div></figure>


<p>
据说 OS X El Capitan以后不需要,我当前用的Sierra不需要这个.</p>

<h3>关闭突发移动感应器(Sudden Motion Sensor, SMS)</h3>

<p>突发移动感应器 (SMS) 技术是针对硬盘设计的内建保护功能，有助于防止电脑在掉落或遭遇异常强烈的振动时出现磁盘问题。目前普遍的观点是MBP的SMS功能在主硬盘位上有,光驱位上没有,由于SMS对SSD没有任何的保护作用,为了防止SMS对主硬盘位上SSD造成数据损坏,建议关闭.<br/>
SMS的详细介绍可以在Apple的官方文档上查看 <a href="https://support.apple.com/zh-cn/HT201666">Mac 笔记本电脑：关于突发移动感应器</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo pmset -g  //查看看sms的状态,1为开启,0位关闭  
</span><span class='line'>sudo pmset sms -a 0 //关闭sms  
</span><span class='line'>sudo pmset -g  //重新查看sms的状态是否为0.  </span></code></pre></td></tr></table></div></figure>


<p>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/shutdown_pmset.jpg" alt="SMS_shutdown" /></p>

<p>关于是否需要关闭SMS的讨论,可以参见这里,<a href="http://bbs.feng.com/read-htm-tid-4285975.html">http://bbs.feng.com/read-htm-tid-4285975.html</a></p>

<h3>关闭Time Machine的本地快照</h3>

<p>本地快照的详情,同样参见<a href="https://support.apple.com/kb/PH25723?viewlocale=zh_CN&amp;locale=zh_CN">Apple Time Machine 官方介绍</a><br/>
这个功能会增加SSD的写入量,降低SSD的寿命.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo tmutil disablelocal //禁用本地快照
</span><span class='line'>sudo tmutil enablelocal  //启用本地快照</span></code></pre></td></tr></table></div></figure>


<p>
在Time Machine的偏好设置中可以查看,本地快照的状态,出现了红色的部分即为启用,不出现即为禁用.<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/timemachine_local.jpg" alt="timemachine_local_shutdown" /></p>

<h2>最终成果</h2>

<p>开机10s以内,Xcode工程秒开,硬盘读写速度爽的飞起.<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/IMG_4036.jpg" alt="SSD_Speed" /></p>

<h2>参考链接</h2>

<p><a href="http://www.superqq.com/blog/2015/08/27/macbook-replace-ssd-solid-state/">http://www.superqq.com/blog/2015/08/27/macbook-replace-ssd-solid-state/</a><br/>
<a href="http://chaishiwei.com/blog/972.html">http://chaishiwei.com/blog/972.html</a><br/>
<a href="https://www.zhihu.com/question/21100176">https://www.zhihu.com/question/21100176</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 操作系统目录说明]]></title>
    <link href="http://douxinchun.github.io/blog/20170103/ios-cao-zuo-xi-tong-mu-lu-shuo-ming.html"/>
    <updated>2017-01-03T11:28:24+08:00</updated>
    <id>http://douxinchun.github.io/blog/20170103/ios-cao-zuo-xi-tong-mu-lu-shuo-ming</id>
    <content type="html"><![CDATA[<p>iOS的设备越狱后,安装openssh,可以通过ssh连接工具(Mac OS 下直接使用Terminal)连接到手机上查看相关的系统目录:
ssh 连接命令常用格式:
`ssh [-l login_name] [-p port] [user@]hostname<br/>
示例:<br/>
$ ssh <a href="&#x6d;&#x61;&#x69;&#108;&#116;&#111;&#58;&#x72;&#111;&#x6f;&#x74;&#64;&#x31;&#48;&#46;&#50;&#x2e;&#x39;&#x38;&#x2e;&#56;&#55;">&#x72;&#x6f;&#x6f;&#x74;&#x40;&#49;&#48;&#x2e;&#50;&#x2e;&#57;&#56;&#x2e;&#x38;&#55;</a><br/>
默认的openssh连接密码为:alpine</p>

<p>一、iPhone的图片是放在：/private /var/ mobile/Media /DCIM当中的。</p>

<!--more-->


<p>二、iPhone中其他基本文件的存放文件目录如下：<br/>
1、/Applications<br/>
常用软件的安装目录<br/>
2. /private/var/mobile/Media/iphone video Recorder
iphone video Recorder录像文件存放目录</p>

<table>
<thead>
<tr>
<th>path     </th>
<th style="text-align:center;"> description</th>
</tr>
</thead>
<tbody>
<tr>
<td>iphone video Recorderdfsajdfks</td>
<td style="text-align:center;">的飞机考六级来看看带分了</td>
</tr>
</tbody>
</table>


<hr />

<hr />

<table>
<thead>
<tr>
<th>First Header </th>
<th> Second Header </th>
<th> Third Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell </td>
<td> Content Cell  </td>
<td> Content Cell</td>
</tr>
<tr>
<td>Content Cell </td>
<td> Content Cell  </td>
<td> Content Cell</td>
</tr>
</tbody>
</table>


<p> 录像文件存放目录 | /private /var/ mobile/Media /iphone video Recorder
3、/private /var/ mobile/Media /DCIM <br/>
相机拍摄的照片文件存放目录<br/>
4、/private/var/ mobile /Media/iTunes_Control/Music <br/>
iTunes上传的多媒体文件（例如MP3、MP4等）存放目录，文件没有被修改，但是文件名字被修改了，直接下载到电脑即可读取。<br/>
5、/private /var/root/Media/EBooks<br/>
熊猫看书存放目录 <br/>
6、/Library/Ringtones<br/>
系统自带的来电铃声存放目录（用iTunes将文件转换为ACC文件，把后缀名改成.m4r,用iPhone_PC_Suite传到/Library/Ringtones即可） <br/>
7、/System/Library/Audio/UISounds<br/>
短信记其它系统默认效果铃声（m4r铃声文件改扩展名为.caf）短信铃声文件名为sms-received开头的caf文件<br/>
8、/private/var/ mobile /Library/AddressBook<br/>
系统电话本的存放目录。<br/>
9、/private /var/ mobile/Media /iphone Recorder<br/>
iphone Recorder录音软件文件存放目录<br/>
10、/Applications/Preferences.app/zh_CN.lproj<br/>
软件Preferences.app的中文汉化文件存放目录<br/>
11、/Library/Wallpaper <br/>
系统q1ang纸的存放目录<br/>
12、/System/Library/Audio/UISounds <br/>
系统声音文件的存放目录<br/>
13、/private/var/root/Media/PXL <br/>
ibrickr上传安装程序建立的一个数据库，估计和windows的uninstall记录差不多。<br/>
14、/bin <br/>
和linux系统差不多，是系统执行指令的存放目录。 <br/>
15、/private/var/ mobile /Library/SMS <br/>
系统短信的存放目录<br/>
16、/private/var/run<br/>
系统进程运行的临时目录？（查看这里可以看到系统启动的所有进程）<br/>
17、/private/var/logs/CrashReporter<br/>
系统错误记录报</p>

<h3>iPhone 特殊文件目录介绍</h3>

<ol>
<li>/private/var/mobile<br/>
新刷完的机器，要在这个文件夹下建一个Documents的目录。</li>
<li>/private/var/mobile/Applications<br/>
通过AppStore和iTunes安装的程序都在里面。</li>
<li>/private/var/stash<br/>
这个文件夹下的Applications目录里面是所有通过Cydia和app安装的程序，Ringtones目录里是所有的手机铃音，自制铃音直接拷在里面即可，Themes目录里是所有Winterboard主题，可以手工修改。</li>
<li>/var/mobile/Media/ROMs/GBA　<br/>
gpsPhone模拟器存放rom的目录。</li>
<li>/var/mobile/Media/textReader<br/>
textReader看书软件读取的电子书的存放路径。</li>
<li>/System/Library/Fonts/Cache<br/>
系统字体目录，要替换的字体放在该目录下，权限644不变</li>
<li>/private/var/mobile/Media/Maps<br/>
离线地图目录，把地图文件夹放到该目录下，文件夹赋予777权限</li>
<li>/private/var/mobile/Library/Downloads<br/>
ipa文件存放目录，用Installous安装</li>
<li>/private/var/mobile/Library/Keyboard<br/>
系统拼音字库文件位置</li>
<li>/var/stash/Themes.XXXXXX<br/>
winterboard主题文件存放路径</li>
<li>/private/var/mobile/Media/DCIM/999APPLE<br/>
系统自带截屏文件存放路径</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Block 声明语法 简记]]></title>
    <link href="http://douxinchun.github.io/blog/20161110/block-sheng-ming-yu-fa-jian-ji.html"/>
    <updated>2016-11-10T10:55:09+08:00</updated>
    <id>http://douxinchun.github.io/blog/20161110/block-sheng-ming-yu-fa-jian-ji</id>
    <content type="html"><![CDATA[<h4>本地变量(Local Variable)</h4>

<blockquote><p>returnType (^blockName)(parameterTypes) = ^returnType(parameters) {&hellip;};</p></blockquote>

<h4>属性(Property)</h4>

<blockquote><p>@property (nonatomic, copy, nullability) returnType (^blockName)(parameterTypes);</p></blockquote>

<h4>方法参数(method parameter)</h4>

<blockquote><ul>
<li>(void)someMethodThatTakesABlock:(returnType (^nullability)(parameterTypes))blockName;</li>
</ul>
</blockquote>

<h4>方法调用的时候的参数</h4>

<blockquote><p>[someObject someMethodThatTakesABlock:^returnType (parameters) {&hellip;}];</p></blockquote>

<h4>重定义(typedef)</h4>

<blockquote><p>typedef returnType (^TypeName)(parameterTypes);
TypeName blockName = ^returnType(parameters) {&hellip;};</p></blockquote>

<h2>参考资料</h2>

<p><a href="http://fuckingblocksyntax.com/">http://fuckingblocksyntax.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apple远程推送Pem证书生成-命令备忘]]></title>
    <link href="http://douxinchun.github.io/blog/20160826/apple-remote-notificatoin-push-pem-file-generate.html"/>
    <updated>2016-08-26T11:12:01+08:00</updated>
    <id>http://douxinchun.github.io/blog/20160826/apple-remote-notificatoin-push-pem-file-generate</id>
    <content type="html"><![CDATA[<h3>Develoepr Environment</h3>

<ol>
<li>去Apple Develop 网站申请Push证书并下载导入到Keychain中.</li>
<li>从Keychain中分别导出证书和密钥的.p12文件:cer.p12 key.p12<br/>
交换密码为:123456</li>
<li><p>使用openssl 将cer.p12及key.p12转成cer.pem和key.pem<br/>
命令如下:</p>

<pre><code>$ openssl pkcs12 -clcerts -nokeys -out cer.pem -in cer.p12
$ openssl pkcs12 -nocerts -out key.pem -in key.p12
</code></pre>

<p>转换密钥文件时候,提示输一个pem的密码,转换完成后清除pem密码的命令:</p>

<pre><code>$ openssl rsa -in key.pem -out key.pem  
</code></pre></li>
<li><p>合并cer.pem及key.pem</p>

<pre><code>$ cat cer.pem key.pem &gt; cer_key.pem
</code></pre></li>
</ol>


<h3>Release Environment 过程同上</h3>

<p>PS.<br/>
测试生成的cer.pem及key.pem是否可用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ openssl s_client -connect gateway.push.apple.com:2195  -cert cer.pem -key key.pem </span></code></pre></td></tr></table></div></figure>


<p>
注：gateway.push.apple.com:2195用于appStore app;<br/>
   gateway.sandbox.push.apple.com:2195用于沙盒app;<br/>
   以上命令执行后会打印一大罗信息，最后处于可输入状态，打几个字符回车后自动断开连接即为正常。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用CocoaLumberjack和XcodeColors实现分级Log和控制台打印彩色日志]]></title>
    <link href="http://douxinchun.github.io/blog/20160728/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-da-yin-cai-se-ri-zhi.html"/>
    <updated>2016-07-28T14:42:39+08:00</updated>
    <id>http://douxinchun.github.io/blog/20160728/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-da-yin-cai-se-ri-zhi</id>
    <content type="html"><![CDATA[<p>本文是基于:<a href="https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/">https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/</a> 的改动.</p>

<p>Xcode是一款非常优秀的IDE,但是在日志打印上貌似没有那么多高级的特性，比如分级打印，显示颜色。本博客就介绍下两个开源组件结合使用达到如下效果：
<img src="http://douxinchun.github.io/blog_reference_image/2016/7/xcode_console_colorful_logs.png"></p>

<h2>1.CocoaLumberjack</h2>

<h3>1.1基本介绍</h3>

<p>CocoaLumberjack是一个开源工程，为Xcode提供分级打印的策略，源码地址:<a href="https://github.com/CocoaLumberjack/CocoaLumberjack">CocoaLumberjack</a></p>

<p>CocoaLumberjack包含几个对象分别可以把Log输出到不同的地方:</p>

<ul>
<li>DDASLLogger 输出到Console.app</li>
<li>DDTTYLogger 输出到Xcode控制台</li>
<li>DDLogFileManager 输出到文件</li>
<li>DDAbstractDatabaseLogger 输出到DB</li>
</ul>


<p>通过ddLogLevel的int型变量或常量来定义打印等级</p>

<ul>
<li>LOG_LEVEL_OFF 关闭Log</li>
<li>LOG_LEVEL_ERROR 只打印Error级别的Log</li>
<li>LOG_LEVEL_WARN 打印Error和Warning级别的Log</li>
<li>LOG_LEVEL_INFO 打印Error、Warn、Info级别的Log</li>
<li>LOG_LEVEL_DEBUG 打印Error、Warn、Info、Debug级别的Log</li>
<li>LOG_LEVEL_VERBOSE 打印Error、Warn、Info、Debug、Verbose级别的Log</li>
</ul>


<p>使用不同的宏打印不同级别的Log</p>

<ul>
<li>DDLogError(frmt, …) 打印Error级别的Log</li>
<li>DDLogWarn(frmt, …) 打印Warn级别的Log</li>
<li>DDLogInfo(frmt, …) 打印Info级别的Log</li>
<li>DDLogDebug(frmt, …) 打印Debug级别的Log</li>
<li>DDLogVerbose(frmt, …) 打印Verbose级别的Log</li>
</ul>


<p>如果,现在想往已有的工程中引入CocoaLumberjack,可以使用下面的宏定义,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define NSLog(...) DDLogInfo(__VA_ARGS__)</span></code></pre></td></tr></table></div></figure>


<h3>1.2设置LogFormatter</h3>

<p>我们可以定制自己的Log的方式。通过创建一个类实现DDLogFormatter协议的方法<code>- (NSString *)formatLogMessage:(DDLogMessage *)logMessage;</code>,如下创建一个LogFormatter类，并实现如下方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>NSDateFormatter *threadUnsafeDateFormatter;
</span><span class='line'>threadUnsafeDateFormatter = [[NSDateFormatter alloc] init];
</span><span class='line'>        [threadUnsafeDateFormatter setDateFormat:@"yyyy/MM/dd HH:mm:ss:SSS"];
</span><span class='line'>...  
</span><span class='line'>    
</span><span class='line'>-(NSString *)formatLogMessage:(DDLogMessage *)logMessage{
</span><span class='line'>    
</span><span class='line'>    NSString *levelStr = nil;
</span><span class='line'>    NSString *dateAndTime = [threadUnsafeDateFormatter stringFromDate:(logMessage-&gt;_timestamp)];
</span><span class='line'>    
</span><span class='line'>    switch (logMessage.flag) {
</span><span class='line'>        case DDLogFlagError:
</span><span class='line'>        {
</span><span class='line'>            levelStr=@"[ERROR]";
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>        case DDLogFlagWarning:{
</span><span class='line'>            levelStr=@"[WARN ]";
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>        case DDLogFlagDebug:{
</span><span class='line'>            levelStr=@"[DEBUG]";
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>        case DDLogFlagInfo:
</span><span class='line'>        {
</span><span class='line'>            levelStr=@"[INFO ]";
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>        default:
</span><span class='line'>            levelStr=@"[VBOSE]";
</span><span class='line'>            break;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    return [NSString stringWithFormat:@"%@ %@ &gt; %@ [line %d] %@",levelStr,dateAndTime,logMessage.function,logMessage.line,logMessage.message];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上面的例子中我们定制了Log能打印自己的等级、类和方法、代码行数。</p>

<h3>1.3初始化</h3>

<p>CocoaLumberjack的引擎需要我们自己来启动。下面的示例代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> DDFileLogger *filelogger = [[DDFileLogger alloc] init];
</span><span class='line'>    filelogger.rollingFrequency = 60*60*24;//1h滚动一次
</span><span class='line'>    filelogger.logFileManager.maximumNumberOfLogFiles = 24;//最大文件数量24个
</span><span class='line'>    
</span><span class='line'>    [[DDTTYLogger sharedInstance] setColorsEnabled:YES];
</span><span class='line'>    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor blackColor] backgroundColor:nil forFlag:DDLogFlagVerbose];
</span><span class='line'>    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor blueColor] backgroundColor:nil forFlag:DDLogFlagDebug];
</span><span class='line'>    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor purpleColor] backgroundColor:nil forFlag:DDLogFlagInfo];
</span><span class='line'>    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor orangeColor] backgroundColor:nil forFlag:DDLogFlagWarning];
</span><span class='line'>
</span><span class='line'>    [DDLog addLogger:[DDTTYLogger sharedInstance]];//写入xCode控制台
</span><span class='line'>    [DDLog addLogger:[DDASLLogger sharedInstance]];//写入到苹果的日志
</span><span class='line'>    [DDLog addLogger:filelogger];//写入到文件系统 Cache/Library/Log
</span><span class='line'>    filelogger.logFormatter = [[SHDDLogFormatter alloc] init];
</span><span class='line'>    [DDTTYLogger sharedInstance].logFormatter = [[SHDDLogFormatter alloc] init];
</span><span class='line'>    
</span><span class='line'>    DDLogError(@"DDLogError 中文错误");      // red
</span><span class='line'>    DDLogWarn(@"DDLogWarn 中文警告");        // orange
</span><span class='line'>    DDLogDebug(@"DDLogDebug 中文调试");      // blue
</span><span class='line'>    DDLogInfo(@"DDLogInfo 中文信息");        // purple
</span><span class='line'>    DDLogVerbose(@"DDLogVerbose 中文详细");  // black
</span><span class='line'>    </span></code></pre></td></tr></table></div></figure>


<h2>2.XcodeColors</h2>

<h3>2.1安装</h3>

<p>XcodeColors是一个Xcode插件，源码地址：<a href="https://github.com/robbiehanson/XcodeColors">XcodeColors</a>; 代码下下来后打开工程run一次，插件就自动安装到了~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/XcodeColors.xcplugin路径下.<br/>
安装完成重启Xcode<br/>
也可以通过Alcatraz来安装,具体的参见<a href="http://douxinchun.github.io/blog/20150401/xcode-plugin-collection.html">Xcode常用插件集合</a></p>

<h3>2.2配置scheme</h3>

<p>在Scheme中配置Environment Variables, 添加参数XcodeColors为YES.如下图
<img src="http://douxinchun.github.io/blog_reference_image/2016/7/XcodeColors_scheme.png"></p>

<h3>2.3为DDLog打开颜色</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[DDTTYLogger sharedInstance] setColorsEnabled:YES];</span></code></pre></td></tr></table></div></figure>


<h3>2.4为特定的Log级别设定颜色</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[DDTTYLogger sharedInstance] setForegroundColor:[UIColor orangeColor] backgroundColor:nil forFlag:DDLogFlagWarning];</span></code></pre></td></tr></table></div></figure>


<p>完成以上步骤就可以看到控制台的不同颜色的打印了。。</p>

<h2>参考文章</h2>

<p><a href="https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/">https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/</a></p>
]]></content>
  </entry>
  
</feed>
